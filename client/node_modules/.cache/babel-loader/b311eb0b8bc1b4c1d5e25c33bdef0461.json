{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from \"react\";\nimport { MESSAGES } from \"../constants/errorMessages\";\nimport isEqual from \"lodash.isequal\";\nvar QueryStatus;\n\n(function (QueryStatus) {\n  QueryStatus[\"loading\"] = \"loading\";\n  QueryStatus[\"error\"] = \"error\";\n  QueryStatus[\"success\"] = \"success\";\n  QueryStatus[\"idle\"] = \"idle\";\n  QueryStatus[\"fetching\"] = \"fetching\";\n})(QueryStatus || (QueryStatus = {}));\n\nexport function useQuery(queryKeys, fn) {\n  _s();\n\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    pollingInterval\n  } = options;\n  const abortControllerRef = useRef();\n  const [state, setState] = useState({\n    status: QueryStatus.idle,\n    data: null,\n    error: null\n  });\n  const isLoading = state.status === QueryStatus.loading;\n  const isError = state.status === QueryStatus.error;\n  const isSuccess = state.status === QueryStatus.success;\n  const isIdle = state.status === QueryStatus.idle;\n  const isFetching = state.status === QueryStatus.fetching;\n\n  async function fetchData() {\n    if (isLoading || isFetching) return Promise.resolve();\n    setState(prevState => ({ ...prevState,\n      status: prevState.status === QueryStatus.idle ? QueryStatus.loading : QueryStatus.fetching\n    }));\n    abortControllerRef.current = new AbortController();\n\n    try {\n      const response = await fn(abortControllerRef.current);\n      setState(_ref => {\n        let {\n          data\n        } = _ref;\n        return {\n          data: isEqual(data, response) ? data : response,\n          status: QueryStatus.success,\n          error: null\n        };\n      });\n    } catch (error) {\n      const errorData = error.response ? error.response.data : {\n        message: MESSAGES.NETWORK_ERROR\n      };\n      setState(prevState => ({ ...prevState,\n        status: QueryStatus.error,\n        error: errorData\n      }));\n      throw errorData;\n    }\n  }\n\n  useEffect(() => {\n    let timerId;\n\n    (async function poll() {\n      try {\n        await fetchData();\n\n        if (pollingInterval != null) {\n          timerId = window.setTimeout(poll, pollingInterval);\n        }\n      } catch (error) {\n        console.log(error.message);\n      }\n    })();\n\n    return () => {\n      var _abortControllerRef$c;\n\n      setState({\n        status: QueryStatus.idle,\n        data: null,\n        error: null\n      });\n      (_abortControllerRef$c = abortControllerRef.current) === null || _abortControllerRef$c === void 0 ? void 0 : _abortControllerRef$c.abort();\n      clearTimeout(timerId);\n    };\n  }, [...queryKeys, pollingInterval]);\n  return {\n    data: state.data,\n    error: state.error,\n    isLoading,\n    isError,\n    isSuccess,\n    isIdle,\n    isFetching,\n    refetchData: fetchData\n  };\n}\n\n_s(useQuery, \"IZV0gZpOHfuVSqT/jyG3TP9o2iY=\");","map":{"version":3,"sources":["/Users/mayank/Desktop/assignments/Chat-App/src/hooks/useQuery.ts"],"names":["useEffect","useState","useRef","MESSAGES","isEqual","QueryStatus","useQuery","queryKeys","fn","options","pollingInterval","abortControllerRef","state","setState","status","idle","data","error","isLoading","loading","isError","isSuccess","success","isIdle","isFetching","fetching","fetchData","Promise","resolve","prevState","current","AbortController","response","errorData","message","NETWORK_ERROR","timerId","poll","window","setTimeout","console","log","abort","clearTimeout","refetchData"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,SAASC,QAAT,QAAyB,4BAAzB;AACA,OAAOC,OAAP,MAAoB,gBAApB;IAEKC,W;;WAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;GAAAA,W,KAAAA,W;;AAYL,OAAO,SAASC,QAAT,CACLC,SADK,EAELC,EAFK,EAIL;AAAA;;AAAA,MADAC,OACA,uEADwB,EACxB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAsBD,OAA5B;AACA,QAAME,kBAAkB,GAAGT,MAAM,EAAjC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAI/B;AACDa,IAAAA,MAAM,EAAET,WAAW,CAACU,IADnB;AAEDC,IAAAA,IAAI,EAAE,IAFL;AAGDC,IAAAA,KAAK,EAAE;AAHN,GAJ+B,CAAlC;AAUA,QAAMC,SAAS,GAAGN,KAAK,CAACE,MAAN,KAAiBT,WAAW,CAACc,OAA/C;AACA,QAAMC,OAAO,GAAGR,KAAK,CAACE,MAAN,KAAiBT,WAAW,CAACY,KAA7C;AACA,QAAMI,SAAS,GAAGT,KAAK,CAACE,MAAN,KAAiBT,WAAW,CAACiB,OAA/C;AACA,QAAMC,MAAM,GAAGX,KAAK,CAACE,MAAN,KAAiBT,WAAW,CAACU,IAA5C;AACA,QAAMS,UAAU,GAAGZ,KAAK,CAACE,MAAN,KAAiBT,WAAW,CAACoB,QAAhD;;AAEA,iBAAeC,SAAf,GAA2B;AACzB,QAAIR,SAAS,IAAIM,UAAjB,EAA6B,OAAOG,OAAO,CAACC,OAAR,EAAP;AAE7Bf,IAAAA,QAAQ,CAAEgB,SAAD,KAAgB,EACvB,GAAGA,SADoB;AAEvBf,MAAAA,MAAM,EACJe,SAAS,CAACf,MAAV,KAAqBT,WAAW,CAACU,IAAjC,GACIV,WAAW,CAACc,OADhB,GAEId,WAAW,CAACoB;AALK,KAAhB,CAAD,CAAR;AAQAd,IAAAA,kBAAkB,CAACmB,OAAnB,GAA6B,IAAIC,eAAJ,EAA7B;;AAEA,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMxB,EAAE,CAACG,kBAAkB,CAACmB,OAApB,CAAzB;AAEAjB,MAAAA,QAAQ,CAAC,QAAc;AAAA,YAAb;AAAEG,UAAAA;AAAF,SAAa;AACrB,eAAO;AACLA,UAAAA,IAAI,EAAEZ,OAAO,CAACY,IAAD,EAAOgB,QAAP,CAAP,GAA0BhB,IAA1B,GAAiCgB,QADlC;AAELlB,UAAAA,MAAM,EAAET,WAAW,CAACiB,OAFf;AAGLL,UAAAA,KAAK,EAAE;AAHF,SAAP;AAKD,OANO,CAAR;AAOD,KAVD,CAUE,OAAOA,KAAP,EAAmB;AACnB,YAAMgB,SAAS,GAAGhB,KAAK,CAACe,QAAN,GACdf,KAAK,CAACe,QAAN,CAAehB,IADD,GAEd;AAAEkB,QAAAA,OAAO,EAAE/B,QAAQ,CAACgC;AAApB,OAFJ;AAIAtB,MAAAA,QAAQ,CAAEgB,SAAD,KAAgB,EACvB,GAAGA,SADoB;AAEvBf,QAAAA,MAAM,EAAET,WAAW,CAACY,KAFG;AAGvBA,QAAAA,KAAK,EAAEgB;AAHgB,OAAhB,CAAD,CAAR;AAMA,YAAMA,SAAN;AACD;AACF;;AAEDjC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIoC,OAAJ;;AAEA,KAAC,eAAeC,IAAf,GAAsB;AACrB,UAAI;AACF,cAAMX,SAAS,EAAf;;AAEA,YAAIhB,eAAe,IAAI,IAAvB,EAA6B;AAC3B0B,UAAAA,OAAO,GAAGE,MAAM,CAACC,UAAP,CAAkBF,IAAlB,EAAwB3B,eAAxB,CAAV;AACD;AACF,OAND,CAME,OAAOO,KAAP,EAAmB;AACnBuB,QAAAA,OAAO,CAACC,GAAR,CAAYxB,KAAK,CAACiB,OAAlB;AACD;AACF,KAVD;;AAYA,WAAO,MAAM;AAAA;;AACXrB,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,MAAM,EAAET,WAAW,CAACU,IAAtB;AAA4BC,QAAAA,IAAI,EAAE,IAAlC;AAAwCC,QAAAA,KAAK,EAAE;AAA/C,OAAD,CAAR;AACA,+BAAAN,kBAAkB,CAACmB,OAAnB,gFAA4BY,KAA5B;AACAC,MAAAA,YAAY,CAACP,OAAD,CAAZ;AACD,KAJD;AAKD,GApBQ,EAoBN,CAAC,GAAG7B,SAAJ,EAAeG,eAAf,CApBM,CAAT;AAsBA,SAAO;AACLM,IAAAA,IAAI,EAAEJ,KAAK,CAACI,IADP;AAELC,IAAAA,KAAK,EAAEL,KAAK,CAACK,KAFR;AAGLC,IAAAA,SAHK;AAILE,IAAAA,OAJK;AAKLC,IAAAA,SALK;AAMLE,IAAAA,MANK;AAOLC,IAAAA,UAPK;AAQLoB,IAAAA,WAAW,EAAElB;AARR,GAAP;AAUD;;GA7FepB,Q","sourcesContent":["import { useEffect, useState, useRef } from \"react\";\nimport { MESSAGES } from \"../constants/errorMessages\";\nimport isEqual from \"lodash.isequal\";\n\nenum QueryStatus {\n  loading = \"loading\",\n  error = \"error\",\n  success = \"success\",\n  idle = \"idle\",\n  fetching = \"fetching\",\n}\n\ntype QueryOptions = {\n  pollingInterval?: number;\n};\n\nexport function useQuery<T>(\n  queryKeys: any[],\n  fn: (controller: AbortController) => Promise<any>,\n  options: QueryOptions = {}\n) {\n  const { pollingInterval } = options;\n  const abortControllerRef = useRef<AbortController>();\n  const [state, setState] = useState<{\n    status: QueryStatus;\n    data: T | null;\n    error: any;\n  }>({\n    status: QueryStatus.idle,\n    data: null,\n    error: null,\n  });\n\n  const isLoading = state.status === QueryStatus.loading;\n  const isError = state.status === QueryStatus.error;\n  const isSuccess = state.status === QueryStatus.success;\n  const isIdle = state.status === QueryStatus.idle;\n  const isFetching = state.status === QueryStatus.fetching;\n\n  async function fetchData() {\n    if (isLoading || isFetching) return Promise.resolve();\n\n    setState((prevState) => ({\n      ...prevState,\n      status:\n        prevState.status === QueryStatus.idle\n          ? QueryStatus.loading\n          : QueryStatus.fetching,\n    }));\n\n    abortControllerRef.current = new AbortController();\n\n    try {\n      const response = await fn(abortControllerRef.current);\n\n      setState(({ data }) => {\n        return {\n          data: isEqual(data, response) ? data : response,\n          status: QueryStatus.success,\n          error: null,\n        };\n      });\n    } catch (error: any) {\n      const errorData = error.response\n        ? error.response.data\n        : { message: MESSAGES.NETWORK_ERROR };\n\n      setState((prevState) => ({\n        ...prevState,\n        status: QueryStatus.error,\n        error: errorData,\n      }));\n\n      throw errorData;\n    }\n  }\n\n  useEffect(() => {\n    let timerId: number | undefined;\n\n    (async function poll() {\n      try {\n        await fetchData();\n\n        if (pollingInterval != null) {\n          timerId = window.setTimeout(poll, pollingInterval);\n        }\n      } catch (error: any) {\n        console.log(error.message);\n      }\n    })();\n\n    return () => {\n      setState({ status: QueryStatus.idle, data: null, error: null });\n      abortControllerRef.current?.abort();\n      clearTimeout(timerId);\n    };\n  }, [...queryKeys, pollingInterval]);\n\n  return {\n    data: state.data,\n    error: state.error,\n    isLoading,\n    isError,\n    isSuccess,\n    isIdle,\n    isFetching,\n    refetchData: fetchData,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}