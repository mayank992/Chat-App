{"ast":null,"code":"import axios from \"axios\";\nimport { client } from \"../utils/apiClient\";\nimport { users, channels } from \"./fixture\";\nimport { CHAT_TYPE } from \"../constants/index\";\nimport { HttpMethods } from \"../types/requestTypes\";\n\nasync function delay(ms) {\n  await new Promise((resolve, reject) => {\n    setTimeout(() => resolve(\"\"), ms);\n  });\n}\n\nexport async function getUsers() {\n  await delay(1000);\n  return users;\n}\nexport async function getConnections(userId, options) {\n  return client(\"/users/connections\", {\n    headers: {\n      userid: userId\n    },\n    ...options\n  });\n}\nexport async function getChannels() {\n  await delay(1000);\n  return channels;\n}\nexport async function getJoinedChannels(userId, options) {\n  return client(\"/channels/joined\", {\n    headers: {\n      userid: userId\n    },\n    ...options\n  });\n}\nexport async function getMessages(userId, type, id, options) {\n  const url = type === CHAT_TYPE.DM ? `/users/${id}/messages` : `/channels/${id}/messages`;\n  return client(url, {\n    headers: {\n      userid: userId\n    },\n    ...options\n  });\n}\nexport async function getChannelMembers(channelId, options) {\n  const res = await axios.get(`/channels/${channelId}/members`, { ...options\n  });\n  return res.data;\n}\nexport async function getChannelNonMembers(channelId, options) {\n  const res = await axios.get(`/channels/${channelId}/nonmembers`, { ...options\n  });\n  return res.data;\n}\nexport async function addUserToChannel(channelId, userId) {\n  await axios.post(`/channels/${channelId}/members`, {\n    userId\n  });\n}\nexport async function sendMessage(message) {\n  let url = message.type === CHAT_TYPE.DM ? `/users/${message.toId}/messages` : `/channels/${message.toId}/messages`;\n  const res = await axios.post(url, {\n    from: message.from,\n    fromId: message.fromId,\n    to: message.to,\n    toId: message.toId,\n    text: message.text\n  }, {\n    headers: {\n      userid: message.fromId\n    }\n  });\n  return;\n}\nexport async function login(body) {\n  const res = await axios.post(\"/login\", body);\n  return res.data;\n}\nexport async function createChannel(channelName) {\n  return client(\"/channels\", {\n    data: {\n      channelName\n    },\n    method: HttpMethods.POST\n  });\n}","map":{"version":3,"sources":["/Users/mayank/Desktop/assignments/Chat-App/src/helpers/index.ts"],"names":["axios","client","users","channels","CHAT_TYPE","HttpMethods","delay","ms","Promise","resolve","reject","setTimeout","getUsers","getConnections","userId","options","headers","userid","getChannels","getJoinedChannels","getMessages","type","id","url","DM","getChannelMembers","channelId","res","get","data","getChannelNonMembers","addUserToChannel","post","sendMessage","message","toId","from","fromId","to","text","login","body","createChannel","channelName","method","POST"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { client } from \"../utils/apiClient\";\nimport { users, channels } from \"./fixture\";\nimport { CHAT_TYPE } from \"../constants/index\";\nimport { HttpMethods } from \"../types/requestTypes\";\n\nasync function delay(ms: number) {\n  await new Promise((resolve, reject) => {\n    setTimeout(() => resolve(\"\"), ms);\n  });\n}\n\nexport async function getUsers() {\n  await delay(1000);\n  return users;\n}\n\nexport async function getConnections(\n  userId: string,\n  options: { [property: string]: any }\n) {\n  return client(\"/users/connections\", {\n    headers: { userid: userId },\n    ...options,\n  });\n}\n\nexport async function getChannels() {\n  await delay(1000);\n  return channels;\n}\n\nexport async function getJoinedChannels(\n  userId: string,\n  options: { [property: string]: any }\n) {\n  return client(\"/channels/joined\", {\n    headers: { userid: userId },\n    ...options,\n  });\n}\n\nexport async function getMessages(\n  userId: string,\n  type: CHAT_TYPE,\n  id: string,\n  options: { [property: string]: any }\n) {\n  const url =\n    type === CHAT_TYPE.DM\n      ? `/users/${id}/messages`\n      : `/channels/${id}/messages`;\n\n  return client(url, {\n    headers: { userid: userId },\n    ...options,\n  });\n}\n\nexport async function getChannelMembers(\n  channelId: string,\n  options: { [property: string]: any }\n) {\n  const res = await axios.get(`/channels/${channelId}/members`, { ...options });\n\n  return res.data;\n}\n\nexport async function getChannelNonMembers(\n  channelId: string,\n  options: { [property: string]: any }\n) {\n  const res = await axios.get(`/channels/${channelId}/nonmembers`, {\n    ...options,\n  });\n\n  return res.data;\n}\n\nexport async function addUserToChannel(channelId: string, userId: string) {\n  await axios.post(`/channels/${channelId}/members`, { userId });\n}\n\nexport async function sendMessage(message: {\n  type: CHAT_TYPE;\n  from: string;\n  fromId: string;\n  to: string;\n  toId: string;\n  text: string;\n}) {\n  let url =\n    message.type === CHAT_TYPE.DM\n      ? `/users/${message.toId}/messages`\n      : `/channels/${message.toId}/messages`;\n\n  const res = await axios.post(\n    url,\n    {\n      from: message.from,\n      fromId: message.fromId,\n      to: message.to,\n      toId: message.toId,\n      text: message.text,\n    },\n    { headers: { userid: message.fromId } }\n  );\n\n  return;\n}\n\nexport async function login(body: {\n  username: string;\n  firstname: string;\n  lastname: string;\n}) {\n  const res = await axios.post(\"/login\", body);\n\n  return res.data;\n}\n\nexport async function createChannel(channelName: string) {\n  return client(\"/channels\", {\n    data: {\n      channelName,\n    },\n    method: HttpMethods.POST,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}