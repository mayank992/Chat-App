{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { messages } from \"../constants/errorMessages\";\nimport isEqual from \"lodash.isequal\";\nvar QueryStatus;\n\n(function (QueryStatus) {\n  QueryStatus[\"loading\"] = \"loading\";\n  QueryStatus[\"error\"] = \"error\";\n  QueryStatus[\"success\"] = \"success\";\n  QueryStatus[\"idle\"] = \"idle\";\n  QueryStatus[\"fetching\"] = \"fetching\";\n})(QueryStatus || (QueryStatus = {}));\n\nexport function useQuery(queryKeys, fn) {\n  _s();\n\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    pollingInterval\n  } = options;\n  const [state, setState] = useState({\n    status: QueryStatus.idle,\n    data: null,\n    error: null\n  });\n  const isLoading = state.status === QueryStatus.loading;\n  const isError = state.status === QueryStatus.error;\n  const isSuccess = state.status === QueryStatus.success;\n  const isIdle = state.status === QueryStatus.idle;\n  const isFetching = state.status === QueryStatus.fetching;\n\n  function fetchData() {\n    // TODO - create a seperate function for refetch data\n    setState(prevState => ({ ...prevState,\n      status: QueryStatus.loading ? QueryStatus.loading : QueryStatus.fetching\n    })); // TODO - create a ref for abort controller to abort any pending request before unmount\n\n    const controller = new AbortController();\n    const promise = fn(controller).then(response => {\n      setState(_ref => {\n        let {\n          data\n        } = _ref;\n        return {\n          data: isEqual(data, response) ? data : response,\n          status: QueryStatus.success,\n          error: null\n        };\n      });\n    }).catch(error => {\n      const errorData = error.response ? error.response.data : {\n        message: messages.NETWORK_ERROR\n      };\n      setState(prevState => ({ ...prevState,\n        status: QueryStatus.error,\n        error: errorData\n      }));\n      throw error;\n    });\n    return [controller, promise];\n  }\n\n  useEffect(() => {\n    console.log(\"useEffect\", queryKeys);\n    setState(curState => ({ ...curState,\n      status: QueryStatus.loading\n    }));\n    let timerId;\n    let abortController;\n\n    (function poll() {\n      let [controller, promise] = fetchData();\n      abortController = controller;\n      promise.then(() => {\n        if (pollingInterval != null) {\n          timerId = window.setTimeout(poll, pollingInterval);\n        }\n      }).catch(err => {});\n    })(); // [abortController] = fetchData();\n    // if (pollingInterval != null) {\n    //   timerId = window.setInterval(() => {\n    //     let promise: Promise<any>;\n    //     // TODO - think more over case - order of request\n    //     [abortController, promise] = refetchData();\n    //     promise.catch((error) => {\n    //       clearInterval(timerId);\n    //     });\n    //   }, pollingInterval);\n    // }\n\n\n    return () => {\n      var _abortController;\n\n      // aborts the pending api call (if any) before applying new effect\n      setState({\n        status: QueryStatus.idle,\n        data: null,\n        error: null\n      });\n      (_abortController = abortController) === null || _abortController === void 0 ? void 0 : _abortController.abort();\n      clearTimeout(timerId);\n    };\n  }, [...queryKeys, pollingInterval]);\n  return {\n    data: state.data,\n    error: state.error,\n    isLoading,\n    isError,\n    isSuccess,\n    isIdle,\n    isFetching,\n    refetchData: fetchData\n  };\n}\n\n_s(useQuery, \"Sbjl6lAQ6UUnnFTAG1Rn1TECXvw=\");","map":{"version":3,"sources":["/Users/mayank/Desktop/assignments/Chat-App/src/hooks/useQuery.ts"],"names":["useEffect","useState","messages","isEqual","QueryStatus","useQuery","queryKeys","fn","options","pollingInterval","state","setState","status","idle","data","error","isLoading","loading","isError","isSuccess","success","isIdle","isFetching","fetching","fetchData","prevState","controller","AbortController","promise","then","response","catch","errorData","message","NETWORK_ERROR","console","log","curState","timerId","abortController","poll","window","setTimeout","err","abort","clearTimeout","refetchData"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { messages } from \"../constants/errorMessages\";\nimport isEqual from \"lodash.isequal\";\n\nenum QueryStatus {\n  loading = \"loading\",\n  error = \"error\",\n  success = \"success\",\n  idle = \"idle\",\n  fetching = \"fetching\",\n}\n\ntype QueryOptions = {\n  pollingInterval?: number;\n};\n\nexport function useQuery<T>(\n  queryKeys: any[],\n  fn: (controller: AbortController) => Promise<any>,\n  options: QueryOptions = {}\n) {\n  const { pollingInterval } = options;\n  const [state, setState] = useState<{\n    status: QueryStatus;\n    data: T | null;\n    error: any;\n  }>({\n    status: QueryStatus.idle,\n    data: null,\n    error: null,\n  });\n\n  const isLoading = state.status === QueryStatus.loading;\n  const isError = state.status === QueryStatus.error;\n  const isSuccess = state.status === QueryStatus.success;\n  const isIdle = state.status === QueryStatus.idle;\n  const isFetching = state.status === QueryStatus.fetching;\n\n  function fetchData(): [AbortController, Promise<any>] {\n    // TODO - create a seperate function for refetch data\n    setState((prevState) => ({\n      ...prevState,\n      status: QueryStatus.loading ? QueryStatus.loading : QueryStatus.fetching,\n    }));\n\n    // TODO - create a ref for abort controller to abort any pending request before unmount\n    const controller = new AbortController();\n\n    const promise = fn(controller)\n      .then((response) => {\n        setState(({ data }) => {\n          return {\n            data: isEqual(data, response) ? data : response,\n            status: QueryStatus.success,\n            error: null,\n          };\n        });\n      })\n      .catch((error) => {\n        const errorData = error.response\n          ? error.response.data\n          : { message: messages.NETWORK_ERROR };\n\n        setState((prevState) => ({\n          ...prevState,\n          status: QueryStatus.error,\n          error: errorData,\n        }));\n        throw error;\n      });\n\n    return [controller, promise];\n  }\n\n  useEffect(() => {\n    console.log(\"useEffect\", queryKeys);\n    setState((curState) => ({ ...curState, status: QueryStatus.loading }));\n\n    let timerId: number | undefined;\n    let abortController: AbortController;\n\n    (function poll() {\n      let [controller, promise] = fetchData();\n      abortController = controller;\n\n      promise\n        .then(() => {\n          if (pollingInterval != null) {\n            timerId = window.setTimeout(poll, pollingInterval);\n          }\n        })\n        .catch((err) => {});\n    })();\n\n    // [abortController] = fetchData();\n\n    // if (pollingInterval != null) {\n    //   timerId = window.setInterval(() => {\n    //     let promise: Promise<any>;\n    //     // TODO - think more over case - order of request\n\n    //     [abortController, promise] = refetchData();\n\n    //     promise.catch((error) => {\n    //       clearInterval(timerId);\n    //     });\n    //   }, pollingInterval);\n    // }\n\n    return () => {\n      // aborts the pending api call (if any) before applying new effect\n      setState({ status: QueryStatus.idle, data: null, error: null });\n      abortController?.abort();\n      clearTimeout(timerId);\n    };\n  }, [...queryKeys, pollingInterval]);\n\n  return {\n    data: state.data,\n    error: state.error,\n    isLoading,\n    isError,\n    isSuccess,\n    isIdle,\n    isFetching,\n    refetchData: fetchData,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}