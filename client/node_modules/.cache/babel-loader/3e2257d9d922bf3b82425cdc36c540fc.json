{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from \"react\";\nimport { MESSAGES } from \"../constants/errorMessages\";\nimport isEqual from \"lodash.isequal\";\nvar QueryStatus;\n\n(function (QueryStatus) {\n  QueryStatus[\"loading\"] = \"loading\";\n  QueryStatus[\"error\"] = \"error\";\n  QueryStatus[\"success\"] = \"success\";\n  QueryStatus[\"idle\"] = \"idle\";\n  QueryStatus[\"fetching\"] = \"fetching\";\n})(QueryStatus || (QueryStatus = {}));\n\nexport function useQuery(queryKeys, fn) {\n  _s();\n\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    pollingInterval\n  } = options;\n  const abortControllerRef = useRef();\n  const [state, setState] = useState({\n    status: QueryStatus.idle,\n    data: null,\n    error: null\n  });\n  const isLoading = state.status === QueryStatus.loading;\n  const isError = state.status === QueryStatus.error;\n  const isSuccess = state.status === QueryStatus.success;\n  const isIdle = state.status === QueryStatus.idle;\n  const isFetching = state.status === QueryStatus.fetching;\n  useEffect(() => {\n    return () => {\n      var _abortControllerRef$c;\n\n      (_abortControllerRef$c = abortControllerRef.current) === null || _abortControllerRef$c === void 0 ? void 0 : _abortControllerRef$c.abort();\n    };\n  }, []);\n\n  function fetchData(abortController) {\n    // TODO - create a seperate function for refetch data\n    setState(prevState => ({ ...prevState,\n      status: prevState.status === QueryStatus.loading ? QueryStatus.loading : QueryStatus.fetching\n    }));\n    return fn(abortController).then(response => {\n      setState(_ref => {\n        let {\n          data\n        } = _ref;\n        return {\n          data: isEqual(data, response) ? data : response,\n          status: QueryStatus.success,\n          error: null\n        };\n      });\n    }).catch(error => {\n      const errorData = error.response ? error.response.data : {\n        message: MESSAGES.NETWORK_ERROR\n      };\n      setState(prevState => ({ ...prevState,\n        status: QueryStatus.error,\n        error: errorData\n      }));\n      throw error;\n    });\n  }\n\n  function refetchData() {\n    if (isLoading || isFetching) return;\n    abortControllerRef.current = new AbortController();\n    return fetchData(abortControllerRef.current);\n  }\n\n  useEffect(() => {\n    setState(curState => ({ ...curState,\n      status: QueryStatus.loading\n    }));\n    let timerId;\n    let abortController;\n\n    (function poll() {\n      abortController = new AbortController();\n      fetchData(abortController).then(() => {\n        if (pollingInterval != null) {\n          timerId = window.setTimeout(poll, pollingInterval);\n        }\n      }).catch(err => {\n        console.log(err.message);\n      });\n    })();\n\n    return () => {\n      var _abortController;\n\n      // aborts the pending api call (if any) before applying new effect\n      setState({\n        status: QueryStatus.idle,\n        data: null,\n        error: null\n      });\n      (_abortController = abortController) === null || _abortController === void 0 ? void 0 : _abortController.abort();\n      clearTimeout(timerId);\n    };\n  }, [...queryKeys, pollingInterval]);\n  return {\n    data: state.data,\n    error: state.error,\n    isLoading,\n    isError,\n    isSuccess,\n    isIdle,\n    isFetching,\n    refetchData\n  };\n}\n\n_s(useQuery, \"r7RGIoe9Yw9/CRpHQpi60ImDe/0=\");","map":{"version":3,"sources":["/Users/mayank/Desktop/assignments/Chat-App/src/hooks/useQuery.ts"],"names":["useEffect","useState","useRef","MESSAGES","isEqual","QueryStatus","useQuery","queryKeys","fn","options","pollingInterval","abortControllerRef","state","setState","status","idle","data","error","isLoading","loading","isError","isSuccess","success","isIdle","isFetching","fetching","current","abort","fetchData","abortController","prevState","then","response","catch","errorData","message","NETWORK_ERROR","refetchData","AbortController","curState","timerId","poll","window","setTimeout","err","console","log","clearTimeout"],"mappings":"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","sourcesContent":["import { useEffect, useState, useRef } from \"react\";\nimport { MESSAGES } from \"../constants/errorMessages\";\nimport isEqual from \"lodash.isequal\";\n\nenum QueryStatus {\n  loading = \"loading\",\n  error = \"error\",\n  success = \"success\",\n  idle = \"idle\",\n  fetching = \"fetching\",\n}\n\ntype QueryOptions = {\n  pollingInterval?: number;\n};\n\nexport function useQuery<T>(\n  queryKeys: any[],\n  fn: (controller: AbortController) => Promise<any>,\n  options: QueryOptions = {}\n) {\n  const { pollingInterval } = options;\n  const abortControllerRef = useRef<AbortController>();\n  const [state, setState] = useState<{\n    status: QueryStatus;\n    data: T | null;\n    error: any;\n  }>({\n    status: QueryStatus.idle,\n    data: null,\n    error: null,\n  });\n\n  const isLoading = state.status === QueryStatus.loading;\n  const isError = state.status === QueryStatus.error;\n  const isSuccess = state.status === QueryStatus.success;\n  const isIdle = state.status === QueryStatus.idle;\n  const isFetching = state.status === QueryStatus.fetching;\n\n  useEffect(() => {\n    return () => {\n      abortControllerRef.current?.abort();\n    };\n  }, []);\n\n  function fetchData(abortController: AbortController) {\n    // TODO - create a seperate function for refetch data\n    setState((prevState) => ({\n      ...prevState,\n      status:\n        prevState.status === QueryStatus.loading\n          ? QueryStatus.loading\n          : QueryStatus.fetching,\n    }));\n\n    return fn(abortController)\n      .then((response) => {\n        setState(({ data }) => {\n          return {\n            data: isEqual(data, response) ? data : response,\n            status: QueryStatus.success,\n            error: null,\n          };\n        });\n      })\n      .catch((error) => {\n        const errorData = error.response\n          ? error.response.data\n          : { message: MESSAGES.NETWORK_ERROR };\n\n        setState((prevState) => ({\n          ...prevState,\n          status: QueryStatus.error,\n          error: errorData,\n        }));\n        throw error;\n      });\n  }\n\n  function refetchData() {\n    if (isLoading || isFetching) return;\n\n    abortControllerRef.current = new AbortController();\n    return fetchData(abortControllerRef.current);\n  }\n\n  useEffect(() => {\n    setState((curState) => ({ ...curState, status: QueryStatus.loading }));\n\n    let timerId: number | undefined;\n    let abortController: AbortController;\n\n    (function poll() {\n      abortController = new AbortController();\n\n      fetchData(abortController)\n        .then(() => {\n          if (pollingInterval != null) {\n            timerId = window.setTimeout(poll, pollingInterval);\n          }\n        })\n        .catch((err) => {\n          console.log(err.message);\n        });\n    })();\n\n    return () => {\n      // aborts the pending api call (if any) before applying new effect\n      setState({ status: QueryStatus.idle, data: null, error: null });\n      abortController?.abort();\n      clearTimeout(timerId);\n    };\n  }, [...queryKeys, pollingInterval]);\n\n  return {\n    data: state.data,\n    error: state.error,\n    isLoading,\n    isError,\n    isSuccess,\n    isIdle,\n    isFetching,\n    refetchData,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}