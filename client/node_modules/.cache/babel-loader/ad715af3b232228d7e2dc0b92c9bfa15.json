{"ast":null,"code":"var _jsxFileName = \"/Users/mayank/Desktop/assignments/Chat-App/src/components/sidebar/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback } from \"react\";\nimport { useUserContext } from \"../../contexts/UserContext\";\nimport { CreateChannelModal } from \"./CreateChannelModal\";\nimport { AddUserDmModal } from \"./AddUserDmModal\";\nimport { CHAT_TYPE } from \"../../constants\";\nimport { Collapsible } from \"../library/collapsible/index\";\nimport { List, ListItem } from \"../library/list/index\";\nimport { useWindow } from \"../../hooks/useWindow\";\nimport hashIcon from \"../../assets/hashtag.png\";\nimport userIcon from \"../../assets/user.png\";\nimport \"./Sidebar.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function Sidebar(_ref) {\n  _s();\n\n  let {\n    users,\n    channels,\n    selected,\n    changeSelected\n  } = _ref;\n  const [user] = useUserContext();\n  const {\n    window: modalName,\n    openWindow: openModal,\n    closeWindow: closeModal\n  } = useWindow();\n  const handleDirectMessageSelect = useCallback(connectionId => {\n    changeSelected({\n      type: CHAT_TYPE.DM,\n      id: connectionId\n    });\n  }, []);\n  const handleChannelSelect = useCallback(channelId => {\n    changeSelected({\n      type: CHAT_TYPE.CHANNEL,\n      id: channelId\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sidebar\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"sidebar__header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: user.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Collapsible, {\n      defaultIsOpen: true,\n      headerContent: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"list-item__text\",\n          children: \"Channels\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"icon\",\n          onClick: e => {\n            e.stopPropagation();\n            openCreateChannelModal();\n          },\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CreateChannelModal, {\n          isOpen: isCreateChannelModalOpen,\n          onClose: closeCreateChannelModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true),\n      children: /*#__PURE__*/_jsxDEV(List, {\n        children: channels.map(channel => /*#__PURE__*/_jsxDEV(ListItem, {\n          isActive: selected.id === channel.id,\n          onClick: () => handleChannelSelect(channel.id),\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: hashIcon,\n            alt: \"channel-icon\",\n            style: {\n              maxHeight: \"100%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"list-item__text\",\n            children: channel.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this)]\n        }, channel.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Collapsible, {\n      defaultIsOpen: true,\n      headerContent: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"list-item__text\",\n          children: \"Direct messages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"icon\",\n          onClick: e => {\n            e.stopPropagation();\n            openAddUserModal();\n          },\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(AddUserDmModal, {\n          isOpen: isAddUserModalOpen,\n          onClose: closeAddUserModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true),\n      children: /*#__PURE__*/_jsxDEV(List, {\n        children: users.map(user => /*#__PURE__*/_jsxDEV(ListItem, {\n          isActive: selected.id === user.id,\n          onClick: () => handleDirectMessageSelect(user.id),\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: userIcon,\n            alt: \"channel-icon\",\n            style: {\n              maxHeight: \"100%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"list-item__text\",\n            children: user.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this)]\n        }, user.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Sidebar, \"SVxwXZj3XmsYp3PZFo29CIgwjgw=\", false, function () {\n  return [useUserContext, useWindow];\n});\n\n_c = Sidebar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"sources":["/Users/mayank/Desktop/assignments/Chat-App/src/components/sidebar/index.tsx"],"names":["useCallback","useUserContext","CreateChannelModal","AddUserDmModal","CHAT_TYPE","Collapsible","List","ListItem","useWindow","hashIcon","userIcon","Sidebar","users","channels","selected","changeSelected","user","window","modalName","openWindow","openModal","closeWindow","closeModal","handleDirectMessageSelect","connectionId","type","DM","id","handleChannelSelect","channelId","CHANNEL","username","e","stopPropagation","openCreateChannelModal","isCreateChannelModalOpen","closeCreateChannelModal","map","channel","maxHeight","name","openAddUserModal","isAddUserModalOpen","closeAddUserModal"],"mappings":"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","sourcesContent":["import { useCallback } from \"react\";\nimport { useUserContext } from \"../../contexts/UserContext\";\nimport { CreateChannelModal } from \"./CreateChannelModal\";\nimport { AddUserDmModal } from \"./AddUserDmModal\";\n\nimport { JoinedChannelType, ConnectionType, Selected } from \"../../types\";\nimport { CHAT_TYPE } from \"../../constants\";\n\nimport { Collapsible } from \"../library/collapsible/index\";\nimport { List, ListItem } from \"../library/list/index\";\nimport { useWindow } from \"../../hooks/useWindow\";\n\nimport hashIcon from \"../../assets/hashtag.png\";\nimport userIcon from \"../../assets/user.png\";\nimport \"./Sidebar.css\";\n\ntype Props = {\n  users: ConnectionType[];\n  channels: JoinedChannelType[];\n  selected: Selected;\n  changeSelected: (toSelect: Selected) => void;\n};\n\nexport function Sidebar({ users, channels, selected, changeSelected }: Props) {\n  const [user] = useUserContext();\n  const {\n    window: modalName,\n    openWindow: openModal,\n    closeWindow: closeModal,\n  } = useWindow<\"createChannel\" | \"addUserDm\">();\n\n  const handleDirectMessageSelect = useCallback((connectionId: string) => {\n    changeSelected({ type: CHAT_TYPE.DM, id: connectionId });\n  }, []);\n\n  const handleChannelSelect = useCallback((channelId: string) => {\n    changeSelected({ type: CHAT_TYPE.CHANNEL, id: channelId });\n  }, []);\n\n  return (\n    <div className=\"sidebar\">\n      <header className=\"sidebar__header\">\n        <h2>{user.username}</h2>\n      </header>\n      <Collapsible\n        defaultIsOpen={true}\n        headerContent={\n          <>\n            <p className=\"list-item__text\">Channels</p>\n            <div\n              className=\"icon\"\n              onClick={(e) => {\n                e.stopPropagation();\n                openCreateChannelModal();\n              }}\n            >\n              +\n            </div>\n            <CreateChannelModal\n              isOpen={isCreateChannelModalOpen}\n              onClose={closeCreateChannelModal}\n            />\n          </>\n        }\n      >\n        <List>\n          {channels.map((channel) => (\n            <ListItem\n              key={channel.id}\n              isActive={selected.id === channel.id}\n              onClick={() => handleChannelSelect(channel.id)}\n            >\n              <img\n                src={hashIcon}\n                alt=\"channel-icon\"\n                style={{ maxHeight: \"100%\" }}\n              />\n              <p className=\"list-item__text\">{channel.name}</p>\n            </ListItem>\n          ))}\n        </List>\n      </Collapsible>\n      <Collapsible\n        defaultIsOpen={true}\n        headerContent={\n          <>\n            <p className=\"list-item__text\">Direct messages</p>\n            <div\n              className=\"icon\"\n              onClick={(e) => {\n                e.stopPropagation();\n                openAddUserModal();\n              }}\n            >\n              +\n            </div>\n            <AddUserDmModal\n              isOpen={isAddUserModalOpen}\n              onClose={closeAddUserModal}\n            />\n          </>\n        }\n      >\n        <List>\n          {users.map((user) => (\n            <ListItem\n              key={user.id}\n              isActive={selected.id === user.id}\n              onClick={() => handleDirectMessageSelect(user.id)}\n            >\n              <img\n                src={userIcon}\n                alt=\"channel-icon\"\n                style={{ maxHeight: \"100%\" }}\n              />\n              <p className=\"list-item__text\">{user.name}</p>\n            </ListItem>\n          ))}\n        </List>\n      </Collapsible>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}