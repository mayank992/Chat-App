{"ast":null,"code":"var _jsxFileName = \"/Users/mayank/Desktop/assignments/Chat-App/src/components/chatArea/ChatFeed.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useImperativeHandle, useLayoutEffect } from \"react\";\nimport { Message } from \"./Message\";\nimport { useGetMessages } from \"./hooks/useGetMessages\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ChatFeed = /*#__PURE__*/_s( /*#__PURE__*/React.forwardRef(_c = _s((_ref, ref) => {\n  _s();\n\n  let {\n    chatType,\n    id\n  } = _ref;\n  const chatFeedRef = useRef(null);\n  const {\n    messages,\n    isLoading,\n    isSuccess,\n    refetchData,\n    isError,\n    error\n  } = useGetMessages(chatType, id);\n  useLayoutEffect(() => {\n    if (chatFeedRef.current) {\n      chatFeedRef.current.scrollTop = chatFeedRef.current.scrollHeight;\n    }\n  }, [messages]);\n  useImperativeHandle(ref, () => ({\n    refreshFeed: refetchData\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat__feed\",\n    ref: chatFeedRef,\n    children: isSuccess && (messages === null || messages === void 0 ? void 0 : messages.data.map(message => {\n      return /*#__PURE__*/_jsxDEV(Message, {\n        message: message\n      }, message.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 20\n      }, this);\n    }))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 7\n  }, this);\n}, \"6p77yt+qMiTEHFJH989QbALrftI=\", false, function () {\n  return [useGetMessages];\n})), \"6p77yt+qMiTEHFJH989QbALrftI=\", false, function () {\n  return [useGetMessages];\n});\n_c2 = ChatFeed;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ChatFeed$React.forwardRef\");\n$RefreshReg$(_c2, \"ChatFeed\");","map":{"version":3,"sources":["/Users/mayank/Desktop/assignments/Chat-App/src/components/chatArea/ChatFeed.tsx"],"names":["React","useRef","useImperativeHandle","useLayoutEffect","Message","useGetMessages","ChatFeed","forwardRef","ref","chatType","id","chatFeedRef","messages","isLoading","isSuccess","refetchData","isError","error","current","scrollTop","scrollHeight","refreshFeed","data","map","message"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,mBAAxB,EAA6CC,eAA7C,QAAoE,OAApE;AAEA,SAASC,OAAT,QAAwB,WAAxB;AAEA,SAASC,cAAT,QAA+B,wBAA/B;;AAQA,OAAO,MAAMC,QAAQ,iCAAGN,KAAK,CAACO,UAAN,SACtB,OAAkCC,GAAlC,KAA0C;AAAA;;AAAA,MAAzC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAyC;AACxC,QAAMC,WAAW,GAAGV,MAAM,CAAiB,IAAjB,CAA1B;AACA,QAAM;AAAEW,IAAAA,QAAF;AAAYC,IAAAA,SAAZ;AAAuBC,IAAAA,SAAvB;AAAkCC,IAAAA,WAAlC;AAA+CC,IAAAA,OAA/C;AAAwDC,IAAAA;AAAxD,MACJZ,cAAc,CAACI,QAAD,EAAWC,EAAX,CADhB;AAGAP,EAAAA,eAAe,CAAC,MAAM;AACpB,QAAIQ,WAAW,CAACO,OAAhB,EAAyB;AACvBP,MAAAA,WAAW,CAACO,OAAZ,CAAoBC,SAApB,GAAgCR,WAAW,CAACO,OAAZ,CAAoBE,YAApD;AACD;AACF,GAJc,EAIZ,CAACR,QAAD,CAJY,CAAf;AAMAV,EAAAA,mBAAmB,CAACM,GAAD,EAAM,OAAO;AAC9Ba,IAAAA,WAAW,EAAEN;AADiB,GAAP,CAAN,CAAnB;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAA4B,IAAA,GAAG,EAAEJ,WAAjC;AAAA,cAGGG,SAAS,KACRF,QADQ,aACRA,QADQ,uBACRA,QAAQ,CAAEU,IAAV,CAAeC,GAAf,CAAoBC,OAAD,IAAa;AAC9B,0BAAO,QAAC,OAAD;AAA0B,QAAA,OAAO,EAAEA;AAAnC,SAAcA,OAAO,CAACd,EAAtB;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFD,CADQ;AAHZ;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CA1BqB;AAAA,UAIlBL,cAJkB;AAAA,GAAH;AAAA,UAIfA,cAJe;AAAA,EAAd;MAAMC,Q","sourcesContent":["import React, { useRef, useImperativeHandle, useLayoutEffect } from \"react\";\nimport { FullPageSpinner } from \"../library/spinner\";\nimport { Message } from \"./Message\";\nimport { CHAT_TYPE } from \"../../constants\";\nimport { useGetMessages } from \"./hooks/useGetMessages\";\nimport { ErrorMessage } from \"../library/Messages\";\n\ntype ChatFeedProps = {\n  chatType: CHAT_TYPE;\n  id: string;\n};\n\nexport const ChatFeed = React.forwardRef(\n  ({ chatType, id }: ChatFeedProps, ref) => {\n    const chatFeedRef = useRef<HTMLDivElement>(null);\n    const { messages, isLoading, isSuccess, refetchData, isError, error } =\n      useGetMessages(chatType, id);\n\n    useLayoutEffect(() => {\n      if (chatFeedRef.current) {\n        chatFeedRef.current.scrollTop = chatFeedRef.current.scrollHeight;\n      }\n    }, [messages]);\n\n    useImperativeHandle(ref, () => ({\n      refreshFeed: refetchData,\n    }));\n\n    return (\n      <div className=\"chat__feed\" ref={chatFeedRef}>\n        {/* {isLoading && <FullPageSpinner size=\"medium\" />}\n        {isError && <ErrorMessage message={error.message} />} */}\n        {isSuccess &&\n          messages?.data.map((message) => {\n            return <Message key={message.id} message={message} />;\n          })}\n      </div>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}