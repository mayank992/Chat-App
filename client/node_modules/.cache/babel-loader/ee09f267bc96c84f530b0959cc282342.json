{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { messages } from \"../constants/errorMessages\";\nimport isEqual from \"lodash.isequal\";\nvar QueryStatus;\n\n(function (QueryStatus) {\n  QueryStatus[\"loading\"] = \"loading\";\n  QueryStatus[\"error\"] = \"error\";\n  QueryStatus[\"success\"] = \"success\";\n  QueryStatus[\"idle\"] = \"idle\";\n  QueryStatus[\"fetching\"] = \"fetching\";\n})(QueryStatus || (QueryStatus = {}));\n\nexport function useQuery(queryKeys, fn) {\n  _s();\n\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    refetchInterval\n  } = options;\n  const [state, setState] = useState({\n    status: QueryStatus.idle,\n    data: null,\n    error: null\n  });\n  const isLoading = state.status === QueryStatus.loading;\n  const isError = state.status === QueryStatus.error;\n  const isSuccess = state.status === QueryStatus.success;\n  const isIdle = state.status === QueryStatus.idle;\n  const isFetching = state.status === QueryStatus.fetching;\n\n  function fetchData() {\n    // TODO - create a seperate function for refetch data\n    // TODO - create a ref for abort controller to abort any pending request before unmount\n    setState(prevState => ({ ...prevState,\n      status: prevState.status === QueryStatus.loading ? QueryStatus.loading : QueryStatus.fetching\n    }));\n    const controller = new AbortController();\n    const promise = fn(controller).then(response => {\n      setState(_ref => {\n        let {\n          data\n        } = _ref;\n        return {\n          data: isEqual(data, response) ? data : response,\n          status: QueryStatus.success,\n          error: null\n        };\n      });\n    }).catch(error => {\n      const errorData = error.response ? error.response.data : {\n        message: messages.NETWORK_ERROR\n      };\n      setState(prevState => ({ ...prevState,\n        status: QueryStatus.error,\n        error: errorData\n      }));\n      throw error;\n    });\n    return [controller, promise];\n  }\n\n  useEffect(() => {\n    let timerId;\n    let abortController;\n    setState(curState => ({ ...curState,\n      status: QueryStatus.loading\n    }));\n    [abortController] = fetchData();\n\n    if (refetchInterval != null) {\n      timerId = window.setInterval(() => {\n        let promise;\n        [abortController, promise] = fetchData();\n        promise.catch(error => {\n          clearInterval(timerId);\n        });\n      }, refetchInterval);\n    }\n\n    return () => {\n      var _abortController;\n\n      // aborts the pending api call (if any) before applying new effect\n      (_abortController = abortController) === null || _abortController === void 0 ? void 0 : _abortController.abort();\n      clearInterval(timerId);\n    };\n  }, [...queryKeys, refetchInterval]);\n  return {\n    data: state.data,\n    error: state.error,\n    isLoading,\n    isError,\n    isSuccess,\n    isIdle,\n    isFetching,\n    refreshData: fetchData\n  };\n}\n\n_s(useQuery, \"Sbjl6lAQ6UUnnFTAG1Rn1TECXvw=\");","map":{"version":3,"sources":["/Users/mayank/Desktop/assignments/Chat-App/src/hooks/useQuery.ts"],"names":["useEffect","useState","messages","isEqual","QueryStatus","useQuery","queryKeys","fn","options","refetchInterval","state","setState","status","idle","data","error","isLoading","loading","isError","isSuccess","success","isIdle","isFetching","fetching","fetchData","prevState","controller","AbortController","promise","then","response","catch","errorData","message","NETWORK_ERROR","timerId","abortController","curState","window","setInterval","clearInterval","abort","refreshData"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { messages } from \"../constants/errorMessages\";\nimport isEqual from \"lodash.isequal\";\n\nenum QueryStatus {\n  loading = \"loading\",\n  error = \"error\",\n  success = \"success\",\n  idle = \"idle\",\n  fetching = \"fetching\",\n}\n\ntype QueryOptions = {\n  refetchInterval?: number;\n};\n\nexport function useQuery<T>(\n  queryKeys: any[],\n  fn: (controller: AbortController) => Promise<any>,\n  options: QueryOptions = {}\n) {\n  const { refetchInterval } = options;\n  const [state, setState] = useState<{\n    status: QueryStatus;\n    data: T | null;\n    error: any;\n  }>({\n    status: QueryStatus.idle,\n    data: null,\n    error: null,\n  });\n\n  const isLoading = state.status === QueryStatus.loading;\n  const isError = state.status === QueryStatus.error;\n  const isSuccess = state.status === QueryStatus.success;\n  const isIdle = state.status === QueryStatus.idle;\n  const isFetching = state.status === QueryStatus.fetching;\n\n  function fetchData(): [AbortController, Promise<any>] {\n    // TODO - create a seperate function for refetch data\n    // TODO - create a ref for abort controller to abort any pending request before unmount\n    setState((prevState) => ({\n      ...prevState,\n      status:\n        prevState.status === QueryStatus.loading\n          ? QueryStatus.loading\n          : QueryStatus.fetching,\n    }));\n\n    const controller = new AbortController();\n\n    const promise = fn(controller)\n      .then((response) => {\n        setState(({ data }) => {\n          return {\n            data: isEqual(data, response) ? data : response,\n            status: QueryStatus.success,\n            error: null,\n          };\n        });\n      })\n      .catch((error) => {\n        const errorData = error.response\n          ? error.response.data\n          : { message: messages.NETWORK_ERROR };\n\n        setState((prevState) => ({\n          ...prevState,\n          status: QueryStatus.error,\n          error: errorData,\n        }));\n        throw error;\n      });\n\n    return [controller, promise];\n  }\n\n  useEffect(() => {\n    let timerId: number | undefined;\n    let abortController: AbortController;\n\n    setState((curState) => ({ ...curState, status: QueryStatus.loading }));\n    [abortController] = fetchData();\n\n    if (refetchInterval != null) {\n      timerId = window.setInterval(() => {\n        let promise: Promise<any>;\n        [abortController, promise] = fetchData();\n\n        promise.catch((error) => {\n          clearInterval(timerId);\n        });\n      }, refetchInterval);\n    }\n\n    return () => {\n      // aborts the pending api call (if any) before applying new effect\n      abortController?.abort();\n      clearInterval(timerId);\n    };\n  }, [...queryKeys, refetchInterval]);\n\n  return {\n    data: state.data,\n    error: state.error,\n    isLoading,\n    isError,\n    isSuccess,\n    isIdle,\n    isFetching,\n    refreshData: fetchData,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}