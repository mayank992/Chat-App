{"ast":null,"code":"var _jsxFileName = \"/Users/mayank/Desktop/assignments/Chat-App/src/components/chatArea/ChannelMembersModal.tsx\",\n    _s = $RefreshSig$();\n\nimport { useQuery } from \"../../hooks/useQuery\";\nimport { getChannelMembers } from \"../../helpers/index\";\nimport { List, ListItem } from \"../lib/list/index\";\nimport { Modal } from \"../modal\";\nimport userIcon from \"../../assets/user.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ChannelMembersModal(_ref) {\n  _s();\n\n  let {\n    isOpen,\n    onClose,\n    channelId\n  } = _ref;\n  const {\n    data: members\n  } = useQuery([channelId], _ref2 => {\n    let {\n      signal\n    } = _ref2;\n    return getChannelMembers(channelId, {\n      signal\n    });\n  }, {\n    pollingInterval: 5000\n  });\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: \"Channel members\",\n    isOpen: isOpen,\n    onClose: onClose,\n    children: /*#__PURE__*/_jsxDEV(List, {\n      children: members === null || members === void 0 ? void 0 : members.map(member => /*#__PURE__*/_jsxDEV(ListItem, {\n        style: {\n          height: \"60px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"chat-members__icon\",\n          src: userIcon,\n          alt: \"user-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: member.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this)]\n      }, member.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChannelMembersModal, \"v9SqxQY0l7DhsodOfV/1T8Rex5I=\", false, function () {\n  return [useQuery];\n});\n\n_c = ChannelMembersModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChannelMembersModal\");","map":{"version":3,"sources":["/Users/mayank/Desktop/assignments/Chat-App/src/components/chatArea/ChannelMembersModal.tsx"],"names":["useQuery","getChannelMembers","List","ListItem","Modal","userIcon","ChannelMembersModal","isOpen","onClose","channelId","data","members","signal","pollingInterval","map","member","height","name","id"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,sBAAzB;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,mBAA/B;AAEA,SAASC,KAAT,QAAsB,UAAtB;AACA,OAAOC,QAAP,MAAqB,uBAArB;;AAQA,OAAO,SAASC,mBAAT,OAAoE;AAAA;;AAAA,MAAvC;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,OAAV;AAAmBC,IAAAA;AAAnB,GAAuC;AACzE,QAAM;AAAEC,IAAAA,IAAI,EAAEC;AAAR,MAAoBX,QAAQ,CAChC,CAACS,SAAD,CADgC,EAEhC;AAAA,QAAC;AAAEG,MAAAA;AAAF,KAAD;AAAA,WAAgBX,iBAAiB,CAACQ,SAAD,EAAY;AAAEG,MAAAA;AAAF,KAAZ,CAAjC;AAAA,GAFgC,EAGhC;AAAEC,IAAAA,eAAe,EAAE;AAAnB,GAHgC,CAAlC;AAMA,sBACE,QAAC,KAAD;AAAO,IAAA,KAAK,EAAC,iBAAb;AAA+B,IAAA,MAAM,EAAEN,MAAvC;AAA+C,IAAA,OAAO,EAAEC,OAAxD;AAAA,2BACE,QAAC,IAAD;AAAA,gBACGG,OADH,aACGA,OADH,uBACGA,OAAO,CAAEG,GAAT,CAAcC,MAAD,iBACZ,QAAC,QAAD;AAA0B,QAAA,KAAK,EAAE;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAAjC;AAAA,gCACE;AACE,UAAA,SAAS,EAAC,oBADZ;AAEE,UAAA,GAAG,EAAEX,QAFP;AAGE,UAAA,GAAG,EAAC;AAHN;AAAA;AAAA;AAAA;AAAA,gBADF,eAME;AAAA,oBAAIU,MAAM,CAACE;AAAX;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA,SAAeF,MAAM,CAACG,EAAtB;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GAvBeZ,mB;UACYN,Q;;;KADZM,mB","sourcesContent":["import { useQuery } from \"../../hooks/useQuery\";\nimport { getChannelMembers } from \"../../helpers/index\";\nimport { List, ListItem } from \"../lib/list/index\";\nimport { ConnectionType } from \"../../types\";\nimport { Modal } from \"../modal\";\nimport userIcon from \"../../assets/user.png\";\n\ntype Props = {\n  isOpen: boolean;\n  onClose: () => void;\n  channelId: string;\n};\n\nexport function ChannelMembersModal({ isOpen, onClose, channelId }: Props) {\n  const { data: members } = useQuery<ConnectionType[]>(\n    [channelId],\n    ({ signal }) => getChannelMembers(channelId, { signal }),\n    { pollingInterval: 5000 }\n  );\n\n  return (\n    <Modal title=\"Channel members\" isOpen={isOpen} onClose={onClose}>\n      <List>\n        {members?.map((member) => (\n          <ListItem key={member.id} style={{ height: \"60px\" }}>\n            <img\n              className=\"chat-members__icon\"\n              src={userIcon}\n              alt=\"user-icon\"\n            />\n            <p>{member.name}</p>\n          </ListItem>\n        ))}\n      </List>\n    </Modal>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}