{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useQuery } from \"./useQuery\";\nimport { getUserDetails } from \"../helpers\";\nimport { useUserContext } from \"../contexts/UserContext\";\nexport function useGetUserDetails() {\n  _s();\n\n  const [user] = useUserContext();\n  const {\n    isError,\n    error,\n    isSuccess,\n    data: userData,\n    isLoading,\n    isFetching,\n    isIdle\n  } = useQuery([user.id], _ref => {\n    let {\n      signal\n    } = _ref;\n    return getUserDetails(user.id, {\n      signal\n    });\n  }, {\n    pollingInterval: 5000\n  });\n  return {\n    userData,\n    isLoading,\n    isError,\n    error,\n    isSuccess,\n    isFetching,\n    isIdle\n  };\n}\n\n_s(useGetUserDetails, \"dhn66qS/kKUpveDMeoojRReGO1w=\", false, function () {\n  return [useUserContext, useQuery];\n});","map":{"version":3,"sources":["/Users/mayank/Desktop/assignments/Chat-App/src/hooks/useGetUserDetails.ts"],"names":["useQuery","getUserDetails","useUserContext","useGetUserDetails","user","isError","error","isSuccess","data","userData","isLoading","isFetching","isIdle","id","signal","pollingInterval"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,YAAzB;AACA,SAASC,cAAT,QAA+B,YAA/B;AACA,SAASC,cAAT,QAA+B,yBAA/B;AAEA,OAAO,SAASC,iBAAT,GAA6B;AAAA;;AAClC,QAAM,CAACC,IAAD,IAASF,cAAc,EAA7B;AACA,QAAM;AACJG,IAAAA,OADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,SAHI;AAIJC,IAAAA,IAAI,EAAEC,QAJF;AAKJC,IAAAA,SALI;AAMJC,IAAAA,UANI;AAOJC,IAAAA;AAPI,MAQFZ,QAAQ,CACV,CAACI,IAAI,CAACS,EAAN,CADU,EAEV;AAAA,QAAC;AAAEC,MAAAA;AAAF,KAAD;AAAA,WAAgBb,cAAc,CAACG,IAAI,CAACS,EAAN,EAAU;AAAEC,MAAAA;AAAF,KAAV,CAA9B;AAAA,GAFU,EAGV;AAAEC,IAAAA,eAAe,EAAE;AAAnB,GAHU,CARZ;AAcA,SAAO;AAAEN,IAAAA,QAAF;AAAYC,IAAAA,SAAZ;AAAuBL,IAAAA,OAAvB;AAAgCC,IAAAA,KAAhC;AAAuCC,IAAAA,SAAvC;AAAkDI,IAAAA,UAAlD;AAA8DC,IAAAA;AAA9D,GAAP;AACD;;GAjBeT,iB;UACCD,c,EASXF,Q","sourcesContent":["import { useQuery } from \"./useQuery\";\nimport { getUserDetails } from \"../helpers\";\nimport { useUserContext } from \"../contexts/UserContext\";\n\nexport function useGetUserDetails() {\n  const [user] = useUserContext();\n  const {\n    isError,\n    error,\n    isSuccess,\n    data: userData,\n    isLoading,\n    isFetching,\n    isIdle,\n  } = useQuery<any>(\n    [user.id],\n    ({ signal }) => getUserDetails(user.id, { signal }),\n    { pollingInterval: 5000 }\n  );\n\n  return { userData, isLoading, isError, error, isSuccess, isFetching, isIdle };\n}\n"]},"metadata":{},"sourceType":"module"}