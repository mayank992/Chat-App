{"ast":null,"code":"var _jsxFileName = \"/Users/mayank/Desktop/assignments/Chat-App/src/pages/main/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\nimport { useUser } from \"../../contexts/UserContext\";\nimport { ChatArea } from \"../../components/chatArea/index\";\nimport { Sidebar } from \"../../components/sidebar/index\";\nimport { CHAT_TYPE } from \"../../constants/index\";\nimport { getUserDetails } from \"../../helpers/index\";\nimport { SplitPane } from \"../../components/common/SplitPane\";\nimport { useQuery } from \"../../hooks/useQuery\";\nimport \"./Main.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// TODO - change useUser to useUserContext\nexport default function Main() {\n  _s();\n\n  const [user] = useUser();\n  const {\n    data: userData\n  } = useQuery([user.id], _ref => {\n    let {\n      signal\n    } = _ref;\n    return getUserDetails(user.id, {\n      signal\n    });\n  }, {\n    refetchInterval: 5000\n  }); // TODO - fix name\n\n  const [selectedChat, setSelectedChat] = useState({\n    type: CHAT_TYPE.DM,\n    id: null\n  });\n  const selectedItem = selected.type === CHAT_TYPE.DM ? userData === null || userData === void 0 ? void 0 : userData.connections.find(connection => connection.id === selectedChat.id) : userData === null || userData === void 0 ? void 0 : userData.channels.find(channel => channel.id === selectedChat.id);\n  const changeSelected = useCallback(toSelect => {\n    setSelectedChat(toSelect);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main__body\",\n      children: /*#__PURE__*/_jsxDEV(SplitPane, {\n        minWidth: \"300px\",\n        leftPane: userData && /*#__PURE__*/_jsxDEV(Sidebar, {\n          users: userData.connections,\n          channels: userData.channels,\n          selected: selected,\n          changeSelected: changeSelected\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this),\n        rightPane: selectedItem && /*#__PURE__*/_jsxDEV(ChatArea, {\n          chatType: selected.type,\n          id: selectedItem.id,\n          name: selectedItem.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Main, \"gRA1bx6iV0D5h/YhRCa+3WPUKPg=\", false, function () {\n  return [useUser, useQuery];\n});\n\n_c = Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/Users/mayank/Desktop/assignments/Chat-App/src/pages/main/index.tsx"],"names":["useState","useCallback","useUser","ChatArea","Sidebar","CHAT_TYPE","getUserDetails","SplitPane","useQuery","Main","user","data","userData","id","signal","refetchInterval","selectedChat","setSelectedChat","type","DM","selectedItem","selected","connections","find","connection","channels","channel","changeSelected","toSelect","name"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,QAAT,QAAyB,iCAAzB;AACA,SAASC,OAAT,QAAwB,gCAAxB;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,SAAT,QAA0B,mCAA1B;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,OAAO,YAAP;;AAOA;AACA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC7B,QAAM,CAACC,IAAD,IAASR,OAAO,EAAtB;AACA,QAAM;AAAES,IAAAA,IAAI,EAAEC;AAAR,MAAqBJ,QAAQ,CACjC,CAACE,IAAI,CAACG,EAAN,CADiC,EAEjC;AAAA,QAAC;AAAEC,MAAAA;AAAF,KAAD;AAAA,WAAgBR,cAAc,CAACI,IAAI,CAACG,EAAN,EAAU;AAAEC,MAAAA;AAAF,KAAV,CAA9B;AAAA,GAFiC,EAGjC;AAAEC,IAAAA,eAAe,EAAE;AAAnB,GAHiC,CAAnC,CAF6B,CAO7B;;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCjB,QAAQ,CAAW;AACzDkB,IAAAA,IAAI,EAAEb,SAAS,CAACc,EADyC;AAEzDN,IAAAA,EAAE,EAAE;AAFqD,GAAX,CAAhD;AAKA,QAAMO,YAAY,GAChBC,QAAQ,CAACH,IAAT,KAAkBb,SAAS,CAACc,EAA5B,GACIP,QADJ,aACIA,QADJ,uBACIA,QAAQ,CAAEU,WAAV,CAAsBC,IAAtB,CACGC,UAAD,IAAqBA,UAAU,CAACX,EAAX,KAAkBG,YAAY,CAACH,EADtD,CADJ,GAIID,QAJJ,aAIIA,QAJJ,uBAIIA,QAAQ,CAAEa,QAAV,CAAmBF,IAAnB,CACGG,OAAD,IAAkBA,OAAO,CAACb,EAAR,KAAeG,YAAY,CAACH,EADhD,CALN;AASA,QAAMc,cAAc,GAAG1B,WAAW,CAAE2B,QAAD,IAAwB;AACzDX,IAAAA,eAAe,CAACW,QAAD,CAAf;AACD,GAFiC,EAE/B,EAF+B,CAAlC;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,6BACE,QAAC,SAAD;AACE,QAAA,QAAQ,EAAC,OADX;AAEE,QAAA,QAAQ,EACNhB,QAAQ,iBACN,QAAC,OAAD;AACE,UAAA,KAAK,EAAEA,QAAQ,CAACU,WADlB;AAEE,UAAA,QAAQ,EAAEV,QAAQ,CAACa,QAFrB;AAGE,UAAA,QAAQ,EAAEJ,QAHZ;AAIE,UAAA,cAAc,EAAEM;AAJlB;AAAA;AAAA;AAAA;AAAA,gBAJN;AAYE,QAAA,SAAS,EACPP,YAAY,iBACV,QAAC,QAAD;AACE,UAAA,QAAQ,EAAEC,QAAQ,CAACH,IADrB;AAEE,UAAA,EAAE,EAAEE,YAAY,CAACP,EAFnB;AAGE,UAAA,IAAI,EAAEO,YAAY,CAACS;AAHrB;AAAA;AAAA;AAAA;AAAA;AAdN;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA4BD;;GAtDuBpB,I;UACPP,O,EACYM,Q;;;KAFLC,I","sourcesContent":["import { useState, useCallback } from \"react\";\nimport { useUser } from \"../../contexts/UserContext\";\nimport { ChatArea } from \"../../components/chatArea/index\";\nimport { Sidebar } from \"../../components/sidebar/index\";\nimport { CHAT_TYPE } from \"../../constants/index\";\nimport { getUserDetails } from \"../../helpers/index\";\nimport { SplitPane } from \"../../components/common/SplitPane\";\nimport { useQuery } from \"../../hooks/useQuery\";\nimport \"./Main.css\";\n\ntype Selected = {\n  type: CHAT_TYPE;\n  id: string | null;\n};\n\n// TODO - change useUser to useUserContext\nexport default function Main() {\n  const [user] = useUser();\n  const { data: userData } = useQuery<any>(\n    [user.id],\n    ({ signal }) => getUserDetails(user.id, { signal }),\n    { refetchInterval: 5000 }\n  );\n  // TODO - fix name\n  const [selectedChat, setSelectedChat] = useState<Selected>({\n    type: CHAT_TYPE.DM,\n    id: null,\n  });\n\n  const selectedItem =\n    selected.type === CHAT_TYPE.DM\n      ? userData?.connections.find(\n          (connection: any) => connection.id === selectedChat.id\n        )\n      : userData?.channels.find(\n          (channel: any) => channel.id === selectedChat.id\n        );\n\n  const changeSelected = useCallback((toSelect: Selected) => {\n    setSelectedChat(toSelect);\n  }, []);\n\n  return (\n    <div className=\"main\">\n      <div className=\"main__body\">\n        <SplitPane\n          minWidth=\"300px\"\n          leftPane={\n            userData && (\n              <Sidebar\n                users={userData.connections}\n                channels={userData.channels}\n                selected={selected}\n                changeSelected={changeSelected}\n              />\n            )\n          }\n          rightPane={\n            selectedItem && (\n              <ChatArea\n                chatType={selected.type}\n                id={selectedItem.id}\n                name={selectedItem.name}\n              />\n            )\n          }\n        />\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}