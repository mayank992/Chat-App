{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useQuery } from \"../../../hooks/useQuery\";\nimport { useUserContext } from \"../../../contexts/UserContext\";\nimport { client } from \"../../../utils/apiClient\";\nexport function useGetChannelMembers(channelId) {\n  _s();\n\n  const [user] = useUserContext();\n  const {\n    data: members,\n    isSuccess,\n    isLoading,\n    isError,\n    error\n  } = useQuery([channelId], _ref => {\n    let {\n      signal\n    } = _ref;\n    return client(`/channels/${channelId}/members`, user.id, {\n      signal\n    });\n  }, {\n    pollingInterval: 5000\n  });\n  return {\n    members,\n    isSuccess,\n    isLoading,\n    isError,\n    error\n  };\n}\n\n_s(useGetChannelMembers, \"IttxguiM/2CUMZ1eIiyR+NOW1Ic=\", false, function () {\n  return [useUserContext, useQuery];\n});","map":{"version":3,"sources":["/Users/mayank/Desktop/assignments/Chat-App/src/components/chatArea/hooks/useGetChannelMembers.ts"],"names":["useQuery","useUserContext","client","useGetChannelMembers","channelId","user","data","members","isSuccess","isLoading","isError","error","signal","id","pollingInterval"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,yBAAzB;AAEA,SAASC,cAAT,QAA+B,+BAA/B;AACA,SAASC,MAAT,QAAuB,0BAAvB;AAEA,OAAO,SAASC,oBAAT,CAA8BC,SAA9B,EAAiD;AAAA;;AACtD,QAAM,CAACC,IAAD,IAASJ,cAAc,EAA7B;AACA,QAAM;AACJK,IAAAA,IAAI,EAAEC,OADF;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,SAHI;AAIJC,IAAAA,OAJI;AAKJC,IAAAA;AALI,MAMFX,QAAQ,CACV,CAACI,SAAD,CADU,EAEV;AAAA,QAAC;AAAEQ,MAAAA;AAAF,KAAD;AAAA,WACEV,MAAM,CAAE,aAAYE,SAAU,UAAxB,EAAmCC,IAAI,CAACQ,EAAxC,EAA4C;AAAED,MAAAA;AAAF,KAA5C,CADR;AAAA,GAFU,EAIV;AAAEE,IAAAA,eAAe,EAAE;AAAnB,GAJU,CANZ;AAaA,SAAO;AAAEP,IAAAA,OAAF;AAAWC,IAAAA,SAAX;AAAsBC,IAAAA,SAAtB;AAAiCC,IAAAA,OAAjC;AAA0CC,IAAAA;AAA1C,GAAP;AACD;;GAhBeR,oB;UACCF,c,EAOXD,Q","sourcesContent":["import { useQuery } from \"../../../hooks/useQuery\";\nimport { ConnectionType } from \"../../../types\";\nimport { useUserContext } from \"../../../contexts/UserContext\";\nimport { client } from \"../../../utils/apiClient\";\n\nexport function useGetChannelMembers(channelId: string) {\n  const [user] = useUserContext();\n  const {\n    data: members,\n    isSuccess,\n    isLoading,\n    isError,\n    error,\n  } = useQuery<ConnectionType[]>(\n    [channelId],\n    ({ signal }) =>\n      client(`/channels/${channelId}/members`, user.id, { signal }),\n    { pollingInterval: 5000 }\n  );\n\n  return { members, isSuccess, isLoading, isError, error };\n}\n"]},"metadata":{},"sourceType":"module"}