{"ast":null,"code":"var _jsxFileName = \"/Users/mayank/Desktop/assignments/Chat-App/src/components/common/Modal.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport React, { useState, createContext, useContext } from \"react\";\nimport \"./Modal.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ModalContext = /*#__PURE__*/createContext([false, () => {}]);\nexport function Modal(props) {\n  _s();\n\n  const [isOpen, setIsOpen] = useState(false);\n  return /*#__PURE__*/_jsxDEV(ModalContext.Provider, {\n    value: [isOpen, setIsOpen],\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 10\n  }, this);\n}\n\n_s(Modal, \"+sus0Lb0ewKHdwiUhiTAJFoFyQ0=\");\n\n_c = Modal;\nexport function ModalOpenButton(_ref) {\n  _s2();\n\n  let {\n    children: child\n  } = _ref;\n  const [, setIsOpen] = useContext(ModalContext);\n  return /*#__PURE__*/React.cloneElement(child, {\n    onClick: () => setIsOpen(true)\n  });\n}\n\n_s2(ModalOpenButton, \"ll9WMajo265urpr44/DXPH8vPbk=\");\n\n_c2 = ModalOpenButton;\nexport function ModalDismissButton(_ref2) {\n  _s3();\n\n  let {\n    children: child\n  } = _ref2;\n  const [, setIsOpen] = useContext(ModalContext);\n  return /*#__PURE__*/React.cloneElement(child, {\n    onClick: () => setIsOpen(false)\n  });\n}\n\n_s3(ModalDismissButton, \"ll9WMajo265urpr44/DXPH8vPbk=\");\n\n_c3 = ModalDismissButton;\nexport function ModalContents(props) {\n  _s4();\n\n  const [isOpen] = useContext(ModalContext);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isOpen && props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 10\n  }, this);\n}\n\n_s4(ModalContents, \"PETZmTlrBmbfV7nf1LHZDY0Oyz0=\");\n\n_c4 = ModalContents;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Modal\");\n$RefreshReg$(_c2, \"ModalOpenButton\");\n$RefreshReg$(_c3, \"ModalDismissButton\");\n$RefreshReg$(_c4, \"ModalContents\");","map":{"version":3,"sources":["/Users/mayank/Desktop/assignments/Chat-App/src/components/common/Modal.tsx"],"names":["React","useState","createContext","useContext","ModalContext","Modal","props","isOpen","setIsOpen","ModalOpenButton","children","child","cloneElement","onClick","ModalDismissButton","ModalContents"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,aAA1B,EAAyCC,UAAzC,QAA2D,OAA3D;AAEA,OAAO,aAAP;;AAOA,MAAMC,YAAY,gBAAGF,aAAa,CAAmB,CAAC,KAAD,EAAQ,MAAM,CAAE,CAAhB,CAAnB,CAAlC;AAEA,OAAO,SAASG,KAAT,CAAeC,KAAf,EAA+C;AAAA;;AACpD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAU,KAAV,CAApC;AAEA,sBAAO,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE,CAACM,MAAD,EAASC,SAAT,CAA9B;AAAA,OAAuDF;AAAvD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAJeD,K;;KAAAA,K;AAUhB,OAAO,SAASI,eAAT,OAEiC;AAAA;;AAAA,MAFR;AAC9BC,IAAAA,QAAQ,EAAEC;AADoB,GAEQ;AACtC,QAAM,GAAGH,SAAH,IAAgBL,UAAU,CAACC,YAAD,CAAhC;AAEA,sBAAOJ,KAAK,CAACY,YAAN,CAAmBD,KAAnB,EAA0B;AAC/BE,IAAAA,OAAO,EAAE,MAAML,SAAS,CAAC,IAAD;AADO,GAA1B,CAAP;AAGD;;IAReC,e;;MAAAA,e;AAUhB,OAAO,SAASK,kBAAT,QAEiC;AAAA;;AAAA,MAFL;AACjCJ,IAAAA,QAAQ,EAAEC;AADuB,GAEK;AACtC,QAAM,GAAGH,SAAH,IAAgBL,UAAU,CAACC,YAAD,CAAhC;AAEA,sBAAOJ,KAAK,CAACY,YAAN,CAAmBD,KAAnB,EAA0B;AAC/BE,IAAAA,OAAO,EAAE,MAAML,SAAS,CAAC,KAAD;AADO,GAA1B,CAAP;AAGD;;IAReM,kB;;MAAAA,kB;AAUhB,OAAO,SAASC,aAAT,CAAuBT,KAAvB,EAAuD;AAAA;;AAC5D,QAAM,CAACC,MAAD,IAAWJ,UAAU,CAACC,YAAD,CAA3B;AAEA,sBAAO;AAAA,cAAMG,MAAM,IAAID,KAAK,CAACI;AAAtB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;IAJeK,a;;MAAAA,a","sourcesContent":["import React, { useState, createContext, useContext } from \"react\";\nimport { useToggle } from \"../../hooks/useToggle\";\nimport \"./Modal.css\";\n\ntype ModalContextType = [\n  boolean,\n  React.Dispatch<React.SetStateAction<boolean>>\n];\n\nconst ModalContext = createContext<ModalContextType>([false, () => {}]);\n\nexport function Modal(props: any): React.ReactElement {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  return <ModalContext.Provider value={[isOpen, setIsOpen]} {...props} />;\n}\n\ntype ModalButtonType = {\n  children: React.ReactElement;\n};\n\nexport function ModalOpenButton({\n  children: child,\n}: ModalButtonType): React.ReactElement {\n  const [, setIsOpen] = useContext(ModalContext);\n\n  return React.cloneElement(child, {\n    onClick: () => setIsOpen(true),\n  });\n}\n\nexport function ModalDismissButton({\n  children: child,\n}: ModalButtonType): React.ReactElement {\n  const [, setIsOpen] = useContext(ModalContext);\n\n  return React.cloneElement(child, {\n    onClick: () => setIsOpen(false),\n  });\n}\n\nexport function ModalContents(props: any): React.ReactElement {\n  const [isOpen] = useContext(ModalContext);\n\n  return <div>{isOpen && props.children}</div>;\n}\n"]},"metadata":{},"sourceType":"module"}