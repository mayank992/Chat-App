{"ast":null,"code":"var _jsxFileName = \"/Users/mayank/Desktop/assignments/Chat-App/src/components/chat/ChannelMembers.tsx\",\n    _s = $RefreshSig$();\n\nimport { useToggle } from \"../../hooks/useToggle\";\nimport { Icon, Arrow } from \"../common/icons/index\";\nimport { useQuery } from \"../../hooks/useQuery\";\nimport { Modal } from \"../Modal\";\nimport { getChannelMembers, getChannelNonMembers, addUserToChannel } from \"../../helpers/index\";\nimport { List } from \"../common/list/index\";\nimport { Collapsible } from \"../common/collapsible\";\nimport userIcon from \"../../assets/user.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function ChannelMembers(_ref) {\n  _s();\n\n  let {\n    channelId\n  } = _ref;\n  const {\n    isOpen,\n    toggle\n  } = useToggle(false);\n  const {\n    data: members,\n    refreshData: refreshMembers\n  } = useQuery([channelId], _ref2 => {\n    let {\n      signal\n    } = _ref2;\n    return getChannelMembers(channelId, {\n      signal\n    });\n  }, {\n    refetchInterval: 5000\n  });\n  const {\n    data: nonMembers,\n    refreshData: refreshNonMembers\n  } = useQuery([channelId], _ref3 => {\n    let {\n      signal\n    } = _ref3;\n    return getChannelNonMembers(channelId, {\n      signal\n    });\n  }, {\n    refetchInterval: 5000\n  });\n\n  function addUser(userId) {\n    addUserToChannel(channelId, userId).then(() => {\n      refreshMembers();\n      refreshNonMembers();\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"chat__members\",\n      onClick: toggle,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"chat-members__icon\",\n        src: userIcon,\n        alt: \"user-img\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"chat__members-count\",\n        children: members === null || members === void 0 ? void 0 : members.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(Modal, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat__members-modal\",\n          children: [/*#__PURE__*/_jsxDEV(\"header\", {\n            className: \"chat__members-modal-hedear\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Members\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Icon, {\n              onClick: toggle,\n              children: \"X\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Collapsible, {\n            defaultIsOpen: true,\n            children: [/*#__PURE__*/_jsxDEV(Collapsible.Header, {\n              render: isOpen => {\n                return /*#__PURE__*/_jsxDEV(List.Item, {\n                  children: [/*#__PURE__*/_jsxDEV(List.ItemIcon, {\n                    children: /*#__PURE__*/_jsxDEV(Arrow, {\n                      direction: isOpen ? \"down\" : \"right\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 59,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 58,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"list-item__text\",\n                    children: \"In this channel\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 61,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 57,\n                  columnNumber: 23\n                }, this);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Collapsible.Content, {\n              children: /*#__PURE__*/_jsxDEV(List, {\n                children: members === null || members === void 0 ? void 0 : members.map(member => /*#__PURE__*/_jsxDEV(List.Item, {\n                  style: {\n                    paddingLeft: \"20px\"\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(List.ItemIcon, {\n                    children: /*#__PURE__*/_jsxDEV(\"img\", {\n                      src: userIcon,\n                      alt: \"user-icon\",\n                      style: {\n                        maxHeight: \"100%\"\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 74,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 73,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(List.ItemText, {\n                    children: member.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 80,\n                    columnNumber: 25\n                  }, this)]\n                }, member.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 69,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Collapsible, {\n            defaultIsOpen: true,\n            children: [/*#__PURE__*/_jsxDEV(Collapsible.Header, {\n              render: isOpen => {\n                return /*#__PURE__*/_jsxDEV(List.Item, {\n                  children: [/*#__PURE__*/_jsxDEV(List.ItemIcon, {\n                    children: /*#__PURE__*/_jsxDEV(Arrow, {\n                      direction: isOpen ? \"down\" : \"right\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 92,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 91,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"list-item__text\",\n                    children: \"Not in this channel\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 94,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 90,\n                  columnNumber: 23\n                }, this);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Collapsible.Content, {\n              children: /*#__PURE__*/_jsxDEV(List, {\n                children: nonMembers === null || nonMembers === void 0 ? void 0 : nonMembers.map(nonMember => /*#__PURE__*/_jsxDEV(List.Item, {\n                  style: {\n                    paddingLeft: \"20px\"\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(List.ItemIcon, {\n                    children: /*#__PURE__*/_jsxDEV(\"img\", {\n                      src: userIcon,\n                      alt: \"user-icon\",\n                      style: {\n                        maxHeight: \"100%\"\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 107,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 106,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(List.ItemText, {\n                    children: nonMember.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 113,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(List.ItemOptions, {\n                    children: /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"channel-members__add-btn\",\n                      onClick: () => addUser(nonMember.id),\n                      children: \"Add\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 115,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 114,\n                    columnNumber: 25\n                  }, this)]\n                }, nonMember.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 102,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ChannelMembers, \"rvKV0iOZG7Hwn8c5BYINN3qg8xg=\", false, function () {\n  return [useToggle, useQuery, useQuery];\n});\n\n_c = ChannelMembers;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChannelMembers\");","map":{"version":3,"sources":["/Users/mayank/Desktop/assignments/Chat-App/src/components/chat/ChannelMembers.tsx"],"names":["useToggle","Icon","Arrow","useQuery","Modal","getChannelMembers","getChannelNonMembers","addUserToChannel","List","Collapsible","userIcon","ChannelMembers","channelId","isOpen","toggle","data","members","refreshData","refreshMembers","signal","refetchInterval","nonMembers","refreshNonMembers","addUser","userId","then","length","map","member","paddingLeft","maxHeight","name","id","nonMember"],"mappings":"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","sourcesContent":["import { useToggle } from \"../../hooks/useToggle\";\nimport { Icon, Arrow } from \"../common/icons/index\";\nimport { useQuery } from \"../../hooks/useQuery\";\nimport { Modal } from \"../Modal\";\nimport {\n  getChannelMembers,\n  getChannelNonMembers,\n  addUserToChannel,\n} from \"../../helpers/index\";\nimport { ConnectionType } from \"../../types\";\nimport { List } from \"../common/list/index\";\nimport { Collapsible } from \"../common/collapsible\";\nimport userIcon from \"../../assets/user.png\";\n\ntype Props = {\n  channelId: string;\n};\n\nexport function ChannelMembers({ channelId }: Props) {\n  const { isOpen, toggle } = useToggle(false);\n  const { data: members, refreshData: refreshMembers } = useQuery<\n    ConnectionType[]\n  >([channelId], ({ signal }) => getChannelMembers(channelId, { signal }), {\n    refetchInterval: 5000,\n  });\n  const { data: nonMembers, refreshData: refreshNonMembers } = useQuery<\n    ConnectionType[]\n  >([channelId], ({ signal }) => getChannelNonMembers(channelId, { signal }), {\n    refetchInterval: 5000,\n  });\n\n  function addUser(userId: string) {\n    addUserToChannel(channelId, userId).then(() => {\n      refreshMembers();\n      refreshNonMembers();\n    });\n  }\n\n  return (\n    <>\n      <span className=\"chat__members\" onClick={toggle}>\n        <img className=\"chat-members__icon\" src={userIcon} alt=\"user-img\" />\n        <p className=\"chat__members-count\">{members?.length}</p>\n      </span>\n      {isOpen && (\n        <Modal>\n          <div className=\"modal-container\">\n            <div className=\"chat__members-modal\">\n              <header className=\"chat__members-modal-hedear\">\n                <h3>Members</h3>\n                <Icon onClick={toggle}>X</Icon>\n              </header>\n              <Collapsible defaultIsOpen={true}>\n                <Collapsible.Header\n                  render={(isOpen) => {\n                    return (\n                      <List.Item>\n                        <List.ItemIcon>\n                          <Arrow direction={isOpen ? \"down\" : \"right\"}></Arrow>\n                        </List.ItemIcon>\n                        <p className=\"list-item__text\">In this channel</p>\n                      </List.Item>\n                    );\n                  }}\n                />\n                <Collapsible.Content>\n                  <List>\n                    {members?.map((member) => (\n                      <List.Item\n                        key={member.id}\n                        style={{ paddingLeft: \"20px\" }}\n                      >\n                        <List.ItemIcon>\n                          <img\n                            src={userIcon}\n                            alt=\"user-icon\"\n                            style={{ maxHeight: \"100%\" }}\n                          />\n                        </List.ItemIcon>\n                        <List.ItemText>{member.name}</List.ItemText>\n                      </List.Item>\n                    ))}\n                  </List>\n                </Collapsible.Content>\n              </Collapsible>\n              <Collapsible defaultIsOpen={true}>\n                <Collapsible.Header\n                  render={(isOpen) => {\n                    return (\n                      <List.Item>\n                        <List.ItemIcon>\n                          <Arrow direction={isOpen ? \"down\" : \"right\"}></Arrow>\n                        </List.ItemIcon>\n                        <p className=\"list-item__text\">Not in this channel</p>\n                      </List.Item>\n                    );\n                  }}\n                />\n                <Collapsible.Content>\n                  <List>\n                    {nonMembers?.map((nonMember) => (\n                      <List.Item\n                        key={nonMember.id}\n                        style={{ paddingLeft: \"20px\" }}\n                      >\n                        <List.ItemIcon>\n                          <img\n                            src={userIcon}\n                            alt=\"user-icon\"\n                            style={{ maxHeight: \"100%\" }}\n                          />\n                        </List.ItemIcon>\n                        <List.ItemText>{nonMember.name}</List.ItemText>\n                        <List.ItemOptions>\n                          <button\n                            className=\"channel-members__add-btn\"\n                            onClick={() => addUser(nonMember.id)}\n                          >\n                            Add\n                          </button>\n                        </List.ItemOptions>\n                      </List.Item>\n                    ))}\n                  </List>\n                </Collapsible.Content>\n              </Collapsible>\n            </div>\n          </div>\n        </Modal>\n      )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}