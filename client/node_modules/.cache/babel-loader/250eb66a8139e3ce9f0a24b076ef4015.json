{"ast":null,"code":"var _jsxFileName = \"/Users/mayank/Desktop/assignments/Chat-App/src/components/sidebar/CreateChannelModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { ButtonWithSpinner } from \"../library/button/index\";\nimport { ErrorMessage, SuccessMessage } from \"../library/Messages\";\nimport { useCreateChannel } from \"./hooks/useCreateChannel\";\nimport { Modal } from \"../library/modal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function CreateChannelModal(props) {\n  _s();\n\n  const [channelName, setChannelName] = useState(\"\");\n  const {\n    isLoading,\n    isError,\n    error,\n    isSuccess,\n    mutate\n  } = useCreateChannel();\n\n  function handleCreateChannel(e) {\n    e.preventDefault();\n    mutate({\n      channelName\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: \"Create channel\",\n    ...props,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create-channel\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"form\",\n        onSubmit: handleCreateChannel,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Channel name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            value: channelName,\n            onChange: e => setChannelName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ButtonWithSpinner, {\n          className: \"submit-btn\",\n          isLoading: isLoading,\n          type: \"submit\",\n          children: \"Create Channel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this), isSuccess && /*#__PURE__*/_jsxDEV(SuccessMessage, {\n          message: \"Channel created successfully.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this), isError && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          message: error === null || error === void 0 ? void 0 : error.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CreateChannelModal, \"v7nh82VV9xxuuyn24LrnCDKPDKQ=\", false, function () {\n  return [useCreateChannel];\n});\n\n_c = CreateChannelModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateChannelModal\");","map":{"version":3,"sources":["/Users/mayank/Desktop/assignments/Chat-App/src/components/sidebar/CreateChannelModal.tsx"],"names":["React","useState","ButtonWithSpinner","ErrorMessage","SuccessMessage","useCreateChannel","Modal","CreateChannelModal","props","channelName","setChannelName","isLoading","isError","error","isSuccess","mutate","handleCreateChannel","e","preventDefault","target","value","message"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,iBAAT,QAAkC,yBAAlC;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,qBAA7C;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,SAASC,KAAT,QAAsB,kBAAtB;;AAEA,OAAO,SAASC,kBAAT,CAA4BC,KAA5B,EAGJ;AAAA;;AACD,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAS,EAAT,CAA9C;AACA,QAAM;AAAEU,IAAAA,SAAF;AAAaC,IAAAA,OAAb;AAAsBC,IAAAA,KAAtB;AAA6BC,IAAAA,SAA7B;AAAwCC,IAAAA;AAAxC,MAAmDV,gBAAgB,EAAzE;;AAEA,WAASW,mBAAT,CAA6BC,CAA7B,EAAkE;AAChEA,IAAAA,CAAC,CAACC,cAAF;AACAH,IAAAA,MAAM,CAAC;AAAEN,MAAAA;AAAF,KAAD,CAAN;AACD;;AAED,sBACE,QAAC,KAAD;AAAO,IAAA,KAAK,EAAC,gBAAb;AAAA,OAAkCD,KAAlC;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,6BACE;AAAM,QAAA,SAAS,EAAC,MAAhB;AAAuB,QAAA,QAAQ,EAAEQ,mBAAjC;AAAA,gCACE;AAAA,mDAEE;AACE,YAAA,KAAK,EAAEP,WADT;AAEE,YAAA,QAAQ,EAAGQ,CAAD,IAAOP,cAAc,CAACO,CAAC,CAACE,MAAF,CAASC,KAAV;AAFjC;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAQE,QAAC,iBAAD;AACE,UAAA,SAAS,EAAC,YADZ;AAEE,UAAA,SAAS,EAAET,SAFb;AAGE,UAAA,IAAI,EAAC,QAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARF,EAeGG,SAAS,iBACR,QAAC,cAAD;AAAgB,UAAA,OAAO,EAAE;AAAzB;AAAA;AAAA;AAAA;AAAA,gBAhBJ,EAkBGF,OAAO,iBAAI,QAAC,YAAD;AAAc,UAAA,OAAO,EAAEC,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEQ;AAA9B;AAAA;AAAA;AAAA;AAAA,gBAlBd;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD;;GAtCed,kB;UAK2CF,gB;;;KAL3CE,kB","sourcesContent":["import React, { useState } from \"react\";\nimport { ButtonWithSpinner } from \"../library/button/index\";\nimport { ErrorMessage, SuccessMessage } from \"../library/Messages\";\nimport { useCreateChannel } from \"./hooks/useCreateChannel\";\nimport { Modal } from \"../library/modal\";\n\nexport function CreateChannelModal(props: {\n  isOpen: boolean;\n  onClose: () => void;\n}) {\n  const [channelName, setChannelName] = useState<string>(\"\");\n  const { isLoading, isError, error, isSuccess, mutate } = useCreateChannel();\n\n  function handleCreateChannel(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    mutate({ channelName });\n  }\n\n  return (\n    <Modal title=\"Create channel\" {...props}>\n      <div className=\"create-channel\">\n        <form className=\"form\" onSubmit={handleCreateChannel}>\n          <label>\n            Channel name:\n            <input\n              value={channelName}\n              onChange={(e) => setChannelName(e.target.value)}\n            />\n          </label>\n          <ButtonWithSpinner\n            className=\"submit-btn\"\n            isLoading={isLoading}\n            type=\"submit\"\n          >\n            Create Channel\n          </ButtonWithSpinner>\n          {isSuccess && (\n            <SuccessMessage message={\"Channel created successfully.\"} />\n          )}\n          {isError && <ErrorMessage message={error?.message} />}\n        </form>\n      </div>\n    </Modal>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}