{"ast":null,"code":"var _jsxFileName = \"/Users/mayank/Desktop/assignments/Chat-App/src/components/chat/ChatFeed.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useContext, useImperativeHandle, useLayoutEffect } from \"react\";\nimport { FullPageSpinner } from \"../common/spinner\";\nimport { Message } from \"./Message\";\nimport { getMessages } from \"../../helpers\";\nimport { useQuery } from \"../../hooks/useQuery\";\nimport { UserContext } from \"../../contexts/UserContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ChatFeed = /*#__PURE__*/_s( /*#__PURE__*/React.forwardRef(_c = _s((_ref, ref) => {\n  _s();\n\n  let {\n    chatType,\n    id\n  } = _ref;\n  const [user] = useContext(UserContext);\n  const chatFeedRef = useRef(null);\n  const {\n    data: messages,\n    refreshData,\n    isLoading\n  } = useQuery([chatType, id], _ref2 => {\n    let {\n      signal\n    } = _ref2;\n    return getMessages(user.id, chatType, id, {\n      signal\n    });\n  }, {\n    refetchInterval: 5000\n  });\n  useLayoutEffect(() => {\n    if (chatFeedRef.current) {\n      console.log(scrollTop + clientHeight, scrollHeight);\n\n      if (initialMessageRender.current) {\n        chatFeedRef.current.scrollTop = scrollHeight;\n        initialMessageRender.current = false;\n      } else if (scrollTop + clientHeight === scrollHeight) {\n        chatFeedRef.current.scrollTop = scrollHeight;\n      }\n    }\n  }, [messages]);\n  useImperativeHandle(ref, () => ({\n    refreshFeed: refreshData\n  }));\n\n  function handleScroll(e) {\n    const {\n      scrollTop,\n      clientHeight,\n      scrollHeight\n    } = e.currentTarget;\n\n    if (scrollTop === 0) {// load more\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat__feed\",\n    ref: chatFeedRef,\n    onScroll: handleScroll,\n    children: isLoading ? /*#__PURE__*/_jsxDEV(FullPageSpinner, {\n      size: \"medium\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }, this) : messages === null || messages === void 0 ? void 0 : messages.map(message => {\n      return /*#__PURE__*/_jsxDEV(Message, {\n        message: message\n      }, message.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 20\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 7\n  }, this);\n}, \"HL8OOsNBKrUaura5aV77dX2qAfk=\", false, function () {\n  return [useQuery];\n})), \"HL8OOsNBKrUaura5aV77dX2qAfk=\", false, function () {\n  return [useQuery];\n});\n_c2 = ChatFeed;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ChatFeed$React.forwardRef\");\n$RefreshReg$(_c2, \"ChatFeed\");","map":{"version":3,"sources":["/Users/mayank/Desktop/assignments/Chat-App/src/components/chat/ChatFeed.tsx"],"names":["React","useRef","useContext","useImperativeHandle","useLayoutEffect","FullPageSpinner","Message","getMessages","useQuery","UserContext","ChatFeed","forwardRef","ref","chatType","id","user","chatFeedRef","data","messages","refreshData","isLoading","signal","refetchInterval","current","console","log","scrollTop","clientHeight","scrollHeight","initialMessageRender","refreshFeed","handleScroll","e","currentTarget","map","message"],"mappings":";;;AAAA,OAAOA,KAAP,IACEC,MADF,EAEEC,UAFF,EAGEC,mBAHF,EAIEC,eAJF,QAMO,OANP;AAOA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,OAAT,QAAwB,WAAxB;AAEA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,WAAT,QAA4B,4BAA5B;;AAQA,OAAO,MAAMC,QAAQ,iCAAGV,KAAK,CAACW,UAAN,SACtB,OAAkCC,GAAlC,KAA0C;AAAA;;AAAA,MAAzC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAyC;AACxC,QAAM,CAACC,IAAD,IAASb,UAAU,CAACO,WAAD,CAAzB;AACA,QAAMO,WAAW,GAAGf,MAAM,CAAiB,IAAjB,CAA1B;AACA,QAAM;AACJgB,IAAAA,IAAI,EAAEC,QADF;AAEJC,IAAAA,WAFI;AAGJC,IAAAA;AAHI,MAIFZ,QAAQ,CACV,CAACK,QAAD,EAAWC,EAAX,CADU,EAEV;AAAA,QAAC;AAAEO,MAAAA;AAAF,KAAD;AAAA,WAAgBd,WAAW,CAACQ,IAAI,CAACD,EAAN,EAAUD,QAAV,EAAoBC,EAApB,EAAwB;AAAEO,MAAAA;AAAF,KAAxB,CAA3B;AAAA,GAFU,EAGV;AAAEC,IAAAA,eAAe,EAAE;AAAnB,GAHU,CAJZ;AAUAlB,EAAAA,eAAe,CAAC,MAAM;AACpB,QAAIY,WAAW,CAACO,OAAhB,EAAyB;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAYC,SAAS,GAAGC,YAAxB,EAAsCC,YAAtC;;AACA,UAAIC,oBAAoB,CAACN,OAAzB,EAAkC;AAChCP,QAAAA,WAAW,CAACO,OAAZ,CAAoBG,SAApB,GAAgCE,YAAhC;AACAC,QAAAA,oBAAoB,CAACN,OAArB,GAA+B,KAA/B;AACD,OAHD,MAGO,IAAIG,SAAS,GAAGC,YAAZ,KAA6BC,YAAjC,EAA+C;AACpDZ,QAAAA,WAAW,CAACO,OAAZ,CAAoBG,SAApB,GAAgCE,YAAhC;AACD;AACF;AACF,GAVc,EAUZ,CAACV,QAAD,CAVY,CAAf;AAYAf,EAAAA,mBAAmB,CAACS,GAAD,EAAM,OAAO;AAC9BkB,IAAAA,WAAW,EAAEX;AADiB,GAAP,CAAN,CAAnB;;AAIA,WAASY,YAAT,CAAsBC,CAAtB,EAAwD;AACtD,UAAM;AAAEN,MAAAA,SAAF;AAAaC,MAAAA,YAAb;AAA2BC,MAAAA;AAA3B,QAA4CI,CAAC,CAACC,aAApD;;AAEA,QAAIP,SAAS,KAAK,CAAlB,EAAqB,CACnB;AACD;AACF;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAA4B,IAAA,GAAG,EAAEV,WAAjC;AAA8C,IAAA,QAAQ,EAAEe,YAAxD;AAAA,cACGX,SAAS,gBACR,QAAC,eAAD;AAAiB,MAAA,IAAI,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,YADQ,GAGRF,QAHQ,aAGRA,QAHQ,uBAGRA,QAAQ,CAAEgB,GAAV,CAAeC,OAAD,IAAa;AACzB,0BAAO,QAAC,OAAD;AAA0B,QAAA,OAAO,EAAEA;AAAnC,SAAcA,OAAO,CAACrB,EAAtB;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFD;AAJJ;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAjDqB;AAAA,UAQhBN,QARgB;AAAA,GAAH;AAAA,UAQbA,QARa;AAAA,EAAd;MAAME,Q","sourcesContent":["import React, {\n  useRef,\n  useContext,\n  useImperativeHandle,\n  useLayoutEffect,\n  useEffect,\n} from \"react\";\nimport { FullPageSpinner } from \"../common/spinner\";\nimport { Message } from \"./Message\";\nimport { MessageType } from \"../../types\";\nimport { getMessages } from \"../../helpers\";\nimport { useQuery } from \"../../hooks/useQuery\";\nimport { UserContext } from \"../../contexts/UserContext\";\nimport { CHAT_TYPE } from \"../../constants\";\n\ntype ChatFeedProps = {\n  chatType: CHAT_TYPE;\n  id: string;\n};\n\nexport const ChatFeed = React.forwardRef(\n  ({ chatType, id }: ChatFeedProps, ref) => {\n    const [user] = useContext(UserContext);\n    const chatFeedRef = useRef<HTMLDivElement>(null);\n    const {\n      data: messages,\n      refreshData,\n      isLoading,\n    } = useQuery<MessageType[]>(\n      [chatType, id],\n      ({ signal }) => getMessages(user.id, chatType, id, { signal }),\n      { refetchInterval: 5000 }\n    );\n\n    useLayoutEffect(() => {\n      if (chatFeedRef.current) {\n        console.log(scrollTop + clientHeight, scrollHeight);\n        if (initialMessageRender.current) {\n          chatFeedRef.current.scrollTop = scrollHeight;\n          initialMessageRender.current = false;\n        } else if (scrollTop + clientHeight === scrollHeight) {\n          chatFeedRef.current.scrollTop = scrollHeight;\n        }\n      }\n    }, [messages]);\n\n    useImperativeHandle(ref, () => ({\n      refreshFeed: refreshData,\n    }));\n\n    function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n      const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n\n      if (scrollTop === 0) {\n        // load more\n      }\n    }\n\n    return (\n      <div className=\"chat__feed\" ref={chatFeedRef} onScroll={handleScroll}>\n        {isLoading ? (\n          <FullPageSpinner size=\"medium\" />\n        ) : (\n          messages?.map((message) => {\n            return <Message key={message.id} message={message} />;\n          })\n        )}\n      </div>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}