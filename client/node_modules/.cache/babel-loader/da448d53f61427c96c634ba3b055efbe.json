{"ast":null,"code":"var _jsxFileName = \"/Users/mayank/Desktop/assignments/Chat-App/src/components/common/collapsible/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useToggle } from \"../../../hooks/useToggle\";\nimport { Arrow } from \"../icons\";\nimport \"./Collapsible.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CollapsibleHeader(_ref) {\n  let {\n    isOpen = false,\n    toggle = () => {},\n    style: customStyle = {},\n    children\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: toggle,\n    style: customStyle,\n    children: [/*#__PURE__*/_jsxDEV(Arrow, {\n      direction: isOpen ? \"down\" : \"right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), render(isOpen, toggle)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n\n_c = CollapsibleHeader;\n\nfunction CollapsibleContent(_ref2) {\n  let {\n    isOpen = false,\n    toggle = () => {},\n    style: customStyle = {},\n    children\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: customStyle,\n    children: isOpen && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 10\n  }, this);\n}\n\n_c2 = CollapsibleContent;\n\nfunction Collapsible(_ref3) {\n  _s();\n\n  let {\n    defaultIsOpen = false,\n    children\n  } = _ref3;\n  const {\n    isOpen,\n    toggle\n  } = useToggle(defaultIsOpen);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: React.Children.map(children, child => {\n      // TODO - Validate types of implicit childrens\n      return /*#__PURE__*/React.cloneElement(child, {\n        isOpen,\n        toggle\n      });\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Collapsible, \"2JZRb2XuIg8Fa4hl5Fehfhv6vGo=\", false, function () {\n  return [useToggle];\n});\n\n_c3 = Collapsible;\nCollapsible.Header = CollapsibleHeader;\nCollapsible.Content = CollapsibleContent;\nexport { Collapsible };\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CollapsibleHeader\");\n$RefreshReg$(_c2, \"CollapsibleContent\");\n$RefreshReg$(_c3, \"Collapsible\");","map":{"version":3,"sources":["/Users/mayank/Desktop/assignments/Chat-App/src/components/common/collapsible/index.tsx"],"names":["React","useToggle","Arrow","CollapsibleHeader","isOpen","toggle","style","customStyle","children","render","CollapsibleContent","Collapsible","defaultIsOpen","Children","map","child","cloneElement","Header","Content"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,OAAO,mBAAP;;;AASA,SAASC,iBAAT,OAK+C;AAAA,MALpB;AACzBC,IAAAA,MAAM,GAAG,KADgB;AAEzBC,IAAAA,MAAM,GAAG,MAAM,CAAE,CAFQ;AAGzBC,IAAAA,KAAK,EAAEC,WAAW,GAAG,EAHI;AAIzBC,IAAAA;AAJyB,GAKoB;AAC7C,sBACE;AAAK,IAAA,OAAO,EAAEH,MAAd;AAAsB,IAAA,KAAK,EAAEE,WAA7B;AAAA,4BACE,QAAC,KAAD;AAAO,MAAA,SAAS,EAAEH,MAAM,GAAG,MAAH,GAAY;AAApC;AAAA;AAAA;AAAA;AAAA,YADF,EAEGK,MAAM,CAACL,MAAD,EAASC,MAAT,CAFT;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;KAZQF,iB;;AAqBT,SAASO,kBAAT,QAKgD;AAAA,MALpB;AAC1BN,IAAAA,MAAM,GAAG,KADiB;AAE1BC,IAAAA,MAAM,GAAG,MAAM,CAAE,CAFS;AAG1BC,IAAAA,KAAK,EAAEC,WAAW,GAAG,EAHK;AAI1BC,IAAAA;AAJ0B,GAKoB;AAC9C,sBAAO;AAAK,IAAA,KAAK,EAAED,WAAZ;AAAA,cAA0BH,MAAM,IAAII;AAApC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;MAPQE,kB;;AAcT,SAASC,WAAT,QAGyC;AAAA;;AAAA,MAHpB;AACnBC,IAAAA,aAAa,GAAG,KADG;AAEnBJ,IAAAA;AAFmB,GAGoB;AACvC,QAAM;AAAEJ,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAqBJ,SAAS,CAACW,aAAD,CAApC;AAEA,sBACE;AAAA,cACGZ,KAAK,CAACa,QAAN,CAAeC,GAAf,CAAmBN,QAAnB,EAA8BO,KAAD,IAAW;AACvC;AACA,0BAAOf,KAAK,CAACgB,YAAN,CAAmBD,KAAnB,EAA0B;AAAEX,QAAAA,MAAF;AAAUC,QAAAA;AAAV,OAA1B,CAAP;AACD,KAHA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GAdQM,W;UAIoBV,S;;;MAJpBU,W;AAgBTA,WAAW,CAACM,MAAZ,GAAqBd,iBAArB;AACAQ,WAAW,CAACO,OAAZ,GAAsBR,kBAAtB;AAEA,SAASC,WAAT","sourcesContent":["import React from \"react\";\nimport { useToggle } from \"../../../hooks/useToggle\";\nimport { Arrow } from \"../icons\";\nimport \"./Collapsible.css\";\n\ntype CollapsibleHeaderProps = {\n  isOpen?: boolean;\n  toggle?: () => void;\n  style?: { [property: string]: string };\n  children: React.ReactNode;\n};\n\nfunction CollapsibleHeader({\n  isOpen = false,\n  toggle = () => {},\n  style: customStyle = {},\n  children,\n}: CollapsibleHeaderProps): React.ReactElement {\n  return (\n    <div onClick={toggle} style={customStyle}>\n      <Arrow direction={isOpen ? \"down\" : \"right\"}></Arrow>\n      {render(isOpen, toggle)}\n    </div>\n  );\n}\n\ntype CollapsibleContentProps = {\n  isOpen?: boolean;\n  toggle?: () => void;\n  style?: { [property: string]: string };\n  children: React.ReactNode;\n};\n\nfunction CollapsibleContent({\n  isOpen = false,\n  toggle = () => {},\n  style: customStyle = {},\n  children,\n}: CollapsibleContentProps): React.ReactElement {\n  return <div style={customStyle}>{isOpen && children}</div>;\n}\n\ntype CollapsibleProps = {\n  defaultIsOpen: boolean;\n  children: React.ReactElement[];\n};\n\nfunction Collapsible({\n  defaultIsOpen = false,\n  children,\n}: CollapsibleProps): React.ReactElement {\n  const { isOpen, toggle } = useToggle(defaultIsOpen);\n\n  return (\n    <div>\n      {React.Children.map(children, (child) => {\n        // TODO - Validate types of implicit childrens\n        return React.cloneElement(child, { isOpen, toggle });\n      })}\n    </div>\n  );\n}\n\nCollapsible.Header = CollapsibleHeader;\nCollapsible.Content = CollapsibleContent;\n\nexport { Collapsible };\n"]},"metadata":{},"sourceType":"module"}