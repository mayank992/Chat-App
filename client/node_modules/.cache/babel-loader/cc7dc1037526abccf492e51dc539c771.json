{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { messages } from \"../constants/errorMessages\";\nvar MutationStatus;\n\n(function (MutationStatus) {\n  MutationStatus[\"loading\"] = \"loading\";\n  MutationStatus[\"error\"] = \"error\";\n  MutationStatus[\"success\"] = \"success\";\n  MutationStatus[\"idle\"] = \"idle\";\n})(MutationStatus || (MutationStatus = {}));\n\nexport function useMutation(fn) {\n  _s();\n\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const [state, setState] = useState({\n    status: MutationStatus.idle,\n    data: null,\n    error: null\n  });\n  const isLoading = state.status === MutationStatus.loading;\n  const isError = state.status === MutationStatus.error;\n  const isSuccess = state.status === MutationStatus.success;\n  const isIdle = state.status === MutationStatus.idle;\n\n  function mutate(reqData, localOptions) {\n    setState(prevState => ({ ...prevState,\n      status: MutationStatus.loading\n    }));\n    const promise = fn(reqData).then(response => {\n      var _options$onSuccess;\n\n      setState({\n        data: response,\n        status: MutationStatus.success,\n        error: null\n      });\n      (_options$onSuccess = options.onSuccess) === null || _options$onSuccess === void 0 ? void 0 : _options$onSuccess.call(options, response);\n    }).catch(error => {\n      var _options$onError;\n\n      let errorData = error.response ? error.response.data : {\n        message: messages.NETWORK_ERROR\n      };\n\n      if (!errorData.message) {\n        errorData = {\n          message: \"Something went wrong\"\n        };\n      }\n\n      setState(prevState => {\n        return { ...prevState,\n          status: MutationStatus.error,\n          error: errorData\n        };\n      });\n      (_options$onError = options.onError) === null || _options$onError === void 0 ? void 0 : _options$onError.call(options, errorData);\n    });\n    return promise;\n  }\n\n  return {\n    data: state.data,\n    error: state.error,\n    isLoading,\n    isError,\n    isSuccess,\n    isIdle,\n    mutate\n  };\n}\n\n_s(useMutation, \"yByv0o29zdgrnkPAwbMstqhIPUw=\");","map":{"version":3,"sources":["/Users/mayank/Desktop/assignments/Chat-App/src/hooks/useMutation.ts"],"names":["useState","messages","MutationStatus","useMutation","fn","options","state","setState","status","idle","data","error","isLoading","loading","isError","isSuccess","success","isIdle","mutate","reqData","localOptions","prevState","promise","then","response","onSuccess","catch","errorData","message","NETWORK_ERROR","onError"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,QAAT,QAAyB,4BAAzB;IAEKC,c;;WAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;GAAAA,c,KAAAA,c;;AAYL,OAAO,SAASC,WAAT,CACLC,EADK,EAGL;AAAA;;AAAA,MADAC,OACA,uEAD0C,EAC1C;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAI/B;AACDQ,IAAAA,MAAM,EAAEN,cAAc,CAACO,IADtB;AAEDC,IAAAA,IAAI,EAAE,IAFL;AAGDC,IAAAA,KAAK,EAAE;AAHN,GAJ+B,CAAlC;AAUA,QAAMC,SAAS,GAAGN,KAAK,CAACE,MAAN,KAAiBN,cAAc,CAACW,OAAlD;AACA,QAAMC,OAAO,GAAGR,KAAK,CAACE,MAAN,KAAiBN,cAAc,CAACS,KAAhD;AACA,QAAMI,SAAS,GAAGT,KAAK,CAACE,MAAN,KAAiBN,cAAc,CAACc,OAAlD;AACA,QAAMC,MAAM,GAAGX,KAAK,CAACE,MAAN,KAAiBN,cAAc,CAACO,IAA/C;;AAEA,WAASS,MAAT,CACEC,OADF,EAEEC,YAFF,EAGgB;AACdb,IAAAA,QAAQ,CAAEc,SAAD,KAAgB,EACvB,GAAGA,SADoB;AAEvBb,MAAAA,MAAM,EAAEN,cAAc,CAACW;AAFA,KAAhB,CAAD,CAAR;AAKA,UAAMS,OAAO,GAAGlB,EAAE,CAACe,OAAD,CAAF,CACbI,IADa,CACPC,QAAD,IAAc;AAAA;;AAClBjB,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAEc,QADC;AAEPhB,QAAAA,MAAM,EAAEN,cAAc,CAACc,OAFhB;AAGPL,QAAAA,KAAK,EAAE;AAHA,OAAD,CAAR;AAKA,4BAAAN,OAAO,CAACoB,SAAR,+EAAApB,OAAO,EAAamB,QAAb,CAAP;AACD,KARa,EASbE,KATa,CASNf,KAAD,IAAW;AAAA;;AAChB,UAAIgB,SAAS,GAAGhB,KAAK,CAACa,QAAN,GACZb,KAAK,CAACa,QAAN,CAAed,IADH,GAEZ;AAAEkB,QAAAA,OAAO,EAAE3B,QAAQ,CAAC4B;AAApB,OAFJ;;AAIA,UAAI,CAACF,SAAS,CAACC,OAAf,EAAwB;AACtBD,QAAAA,SAAS,GAAG;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAAZ;AACD;;AAEDrB,MAAAA,QAAQ,CAAEc,SAAD,IAAe;AACtB,eAAO,EACL,GAAGA,SADE;AAELb,UAAAA,MAAM,EAAEN,cAAc,CAACS,KAFlB;AAGLA,UAAAA,KAAK,EAAEgB;AAHF,SAAP;AAKD,OANO,CAAR;AAOA,0BAAAtB,OAAO,CAACyB,OAAR,2EAAAzB,OAAO,EAAWsB,SAAX,CAAP;AACD,KA1Ba,CAAhB;AA4BA,WAAOL,OAAP;AACD;;AAED,SAAO;AACLZ,IAAAA,IAAI,EAAEJ,KAAK,CAACI,IADP;AAELC,IAAAA,KAAK,EAAEL,KAAK,CAACK,KAFR;AAGLC,IAAAA,SAHK;AAILE,IAAAA,OAJK;AAKLC,IAAAA,SALK;AAMLE,IAAAA,MANK;AAOLC,IAAAA;AAPK,GAAP;AASD;;GApEef,W","sourcesContent":["import { useState } from \"react\";\nimport { messages } from \"../constants/errorMessages\";\n\nenum MutationStatus {\n  loading = \"loading\",\n  error = \"error\",\n  success = \"success\",\n  idle = \"idle\",\n}\n\ninterface MutationOptions<TData, TError> {\n  onSuccess?: (res: TData) => void;\n  onError?: (error: TError) => void;\n}\n\nexport function useMutation<TData, TError, TParams>(\n  fn: (reqData: TParams) => Promise<TData>,\n  options: MutationOptions<TData, TError> = {}\n) {\n  const [state, setState] = useState<{\n    status: MutationStatus;\n    data: TData | null;\n    error: TError | null;\n  }>({\n    status: MutationStatus.idle,\n    data: null,\n    error: null,\n  });\n\n  const isLoading = state.status === MutationStatus.loading;\n  const isError = state.status === MutationStatus.error;\n  const isSuccess = state.status === MutationStatus.success;\n  const isIdle = state.status === MutationStatus.idle;\n\n  function mutate(\n    reqData: TParams,\n    localOptions?: MutationOptions<TData, TError>\n  ): Promise<any> {\n    setState((prevState) => ({\n      ...prevState,\n      status: MutationStatus.loading,\n    }));\n\n    const promise = fn(reqData)\n      .then((response) => {\n        setState({\n          data: response,\n          status: MutationStatus.success,\n          error: null,\n        });\n        options.onSuccess?.(response);\n      })\n      .catch((error) => {\n        let errorData = error.response\n          ? error.response.data\n          : { message: messages.NETWORK_ERROR };\n\n        if (!errorData.message) {\n          errorData = { message: \"Something went wrong\" };\n        }\n\n        setState((prevState) => {\n          return {\n            ...prevState,\n            status: MutationStatus.error,\n            error: errorData,\n          };\n        });\n        options.onError?.(errorData);\n      });\n\n    return promise;\n  }\n\n  return {\n    data: state.data,\n    error: state.error,\n    isLoading,\n    isError,\n    isSuccess,\n    isIdle,\n    mutate,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}