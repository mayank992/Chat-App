{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { CHAT_TYPE } from \"../../../constants\";\nimport { useUserContext } from \"../../../contexts/UserContext\";\nimport { useQuery } from \"../../../hooks/useQuery\";\nimport { client } from \"../../../utils/apiClient\";\nexport function useGetMessages(chatType, id) {\n  _s();\n\n  const [user] = useUserContext();\n  const {\n    data: messages,\n    refetchData,\n    isLoading,\n    isSuccess,\n    isError,\n    error\n  } = useQuery([chatType, id], _ref => {\n    let {\n      signal\n    } = _ref;\n    const url = chatType === CHAT_TYPE.DM ? `/connections/${id}/messages` : `/channels/${id}/messages`;\n    return client(url, user.id, {\n      signal\n    });\n  }, {\n    pollingInterval: 1000\n  });\n  return {\n    messages,\n    refetchData,\n    isLoading,\n    isSuccess,\n    isError,\n    error\n  };\n}\n\n_s(useGetMessages, \"iN97f4ekCY8JQcpdhdtswgt9R3A=\", false, function () {\n  return [useUserContext, useQuery];\n});","map":{"version":3,"sources":["/Users/mayank/Desktop/assignments/Chat-App/src/components/chatArea/hooks/useGetMessages.ts"],"names":["CHAT_TYPE","useUserContext","useQuery","client","useGetMessages","chatType","id","user","data","messages","refetchData","isLoading","isSuccess","isError","error","signal","url","DM","pollingInterval"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,SAASC,cAAT,QAA+B,+BAA/B;AACA,SAASC,QAAT,QAAyB,yBAAzB;AAEA,SAASC,MAAT,QAAuB,0BAAvB;AAEA,OAAO,SAASC,cAAT,CAAwBC,QAAxB,EAA6CC,EAA7C,EAAyD;AAAA;;AAC9D,QAAM,CAACC,IAAD,IAASN,cAAc,EAA7B;AACA,QAAM;AACJO,IAAAA,IAAI,EAAEC,QADF;AAEJC,IAAAA,WAFI;AAGJC,IAAAA,SAHI;AAIJC,IAAAA,SAJI;AAKJC,IAAAA,OALI;AAMJC,IAAAA;AANI,MAOFZ,QAAQ,CACV,CAACG,QAAD,EAAWC,EAAX,CADU,EAEV,QAAgB;AAAA,QAAf;AAAES,MAAAA;AAAF,KAAe;AACd,UAAMC,GAAG,GACPX,QAAQ,KAAKL,SAAS,CAACiB,EAAvB,GACK,gBAAeX,EAAG,WADvB,GAEK,aAAYA,EAAG,WAHtB;AAKA,WAAOH,MAAM,CAACa,GAAD,EAAMT,IAAI,CAACD,EAAX,EAAe;AAAES,MAAAA;AAAF,KAAf,CAAb;AACD,GATS,EAUV;AAAEG,IAAAA,eAAe,EAAE;AAAnB,GAVU,CAPZ;AAoBA,SAAO;AAAET,IAAAA,QAAF;AAAYC,IAAAA,WAAZ;AAAyBC,IAAAA,SAAzB;AAAoCC,IAAAA,SAApC;AAA+CC,IAAAA,OAA/C;AAAwDC,IAAAA;AAAxD,GAAP;AACD;;GAvBeV,c;UACCH,c,EAQXC,Q","sourcesContent":["import { CHAT_TYPE } from \"../../../constants\";\nimport { useUserContext } from \"../../../contexts/UserContext\";\nimport { useQuery } from \"../../../hooks/useQuery\";\nimport { MessageType } from \"../../../types\";\nimport { client } from \"../../../utils/apiClient\";\n\nexport function useGetMessages(chatType: CHAT_TYPE, id: string) {\n  const [user] = useUserContext();\n  const {\n    data: messages,\n    refetchData,\n    isLoading,\n    isSuccess,\n    isError,\n    error,\n  } = useQuery<{ data: MessageType[] }>(\n    [chatType, id],\n    ({ signal }) => {\n      const url =\n        chatType === CHAT_TYPE.DM\n          ? `/connections/${id}/messages`\n          : `/channels/${id}/messages`;\n\n      return client(url, user.id, { signal });\n    },\n    { pollingInterval: 1000 }\n  );\n\n  return { messages, refetchData, isLoading, isSuccess, isError, error };\n}\n"]},"metadata":{},"sourceType":"module"}