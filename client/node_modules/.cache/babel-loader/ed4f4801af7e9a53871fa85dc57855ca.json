{"ast":null,"code":"var _jsxFileName = \"/Users/mayank/Desktop/assignments/Chat-App/src/components/chatArea/ChatFeed.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useImperativeHandle, useLayoutEffect } from \"react\";\nimport { FullPageSpinner } from \"../library/spinner\";\nimport { Message } from \"./Message\";\nimport { useGetMessages } from \"./hooks/useGetMessages\";\nimport { ErrorMessage } from \"../library/Messages\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ChatFeed = /*#__PURE__*/_s( /*#__PURE__*/React.forwardRef(_c = _s((_ref, ref) => {\n  _s();\n\n  let {\n    chatType,\n    id\n  } = _ref;\n  const chatFeedRef = useRef(null);\n  const {\n    messages,\n    isLoading,\n    refetchData,\n    isError,\n    error\n  } = useGetMessages(chatType, id);\n  useLayoutEffect(() => {\n    if (chatFeedRef.current) {\n      chatFeedRef.current.scrollTop = chatFeedRef.current.scrollHeight;\n    }\n  }, [messages]); // instead of using imperative handler lift this messages state up\n\n  useImperativeHandle(ref, () => ({\n    refreshFeed: refetchData\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat__feed\",\n    ref: chatFeedRef,\n    children: [isLoading && /*#__PURE__*/_jsxDEV(FullPageSpinner, {\n      size: \"medium\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 23\n    }, this), isError && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      message: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 21\n    }, this), messages === null || messages === void 0 ? void 0 : messages.data.map(message => {\n      return /*#__PURE__*/_jsxDEV(Message, {\n        message: message\n      }, message.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 18\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 7\n  }, this);\n}, \"UCLETzU9f9cQYlK9nSsmleRAnZg=\", false, function () {\n  return [useGetMessages];\n})), \"UCLETzU9f9cQYlK9nSsmleRAnZg=\", false, function () {\n  return [useGetMessages];\n});\n_c2 = ChatFeed;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ChatFeed$React.forwardRef\");\n$RefreshReg$(_c2, \"ChatFeed\");","map":{"version":3,"sources":["/Users/mayank/Desktop/assignments/Chat-App/src/components/chatArea/ChatFeed.tsx"],"names":["React","useRef","useImperativeHandle","useLayoutEffect","FullPageSpinner","Message","useGetMessages","ErrorMessage","ChatFeed","forwardRef","ref","chatType","id","chatFeedRef","messages","isLoading","refetchData","isError","error","current","scrollTop","scrollHeight","refreshFeed","message","data","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,mBAAxB,EAA6CC,eAA7C,QAAoE,OAApE;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,SAASC,OAAT,QAAwB,WAAxB;AAEA,SAASC,cAAT,QAA+B,wBAA/B;AACA,SAASC,YAAT,QAA6B,qBAA7B;;AAOA,OAAO,MAAMC,QAAQ,iCAAGR,KAAK,CAACS,UAAN,SACtB,OAAkCC,GAAlC,KAA0C;AAAA;;AAAA,MAAzC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAyC;AACxC,QAAMC,WAAW,GAAGZ,MAAM,CAAiB,IAAjB,CAA1B;AACA,QAAM;AAAEa,IAAAA,QAAF;AAAYC,IAAAA,SAAZ;AAAuBC,IAAAA,WAAvB;AAAoCC,IAAAA,OAApC;AAA6CC,IAAAA;AAA7C,MAAuDZ,cAAc,CACzEK,QADyE,EAEzEC,EAFyE,CAA3E;AAKAT,EAAAA,eAAe,CAAC,MAAM;AACpB,QAAIU,WAAW,CAACM,OAAhB,EAAyB;AACvBN,MAAAA,WAAW,CAACM,OAAZ,CAAoBC,SAApB,GAAgCP,WAAW,CAACM,OAAZ,CAAoBE,YAApD;AACD;AACF,GAJc,EAIZ,CAACP,QAAD,CAJY,CAAf,CAPwC,CAaxC;;AACAZ,EAAAA,mBAAmB,CAACQ,GAAD,EAAM,OAAO;AAC9BY,IAAAA,WAAW,EAAEN;AADiB,GAAP,CAAN,CAAnB;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAA4B,IAAA,GAAG,EAAEH,WAAjC;AAAA,eACGE,SAAS,iBAAI,QAAC,eAAD;AAAiB,MAAA,IAAI,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,YADhB,EAEGE,OAAO,iBAAI,QAAC,YAAD;AAAc,MAAA,OAAO,EAAEC,KAAK,CAACK;AAA7B;AAAA;AAAA;AAAA;AAAA,YAFd,EAGGT,QAHH,aAGGA,QAHH,uBAGGA,QAAQ,CAAEU,IAAV,CAAeC,GAAf,CAAoBF,OAAD,IAAa;AAC/B,0BAAO,QAAC,OAAD;AAA0B,QAAA,OAAO,EAAEA;AAAnC,SAAcA,OAAO,CAACX,EAAtB;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFA,CAHH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CA5BqB;AAAA,UAGyCN,cAHzC;AAAA,GAAH;AAAA,UAG4CA,cAH5C;AAAA,EAAd;MAAME,Q","sourcesContent":["import React, { useRef, useImperativeHandle, useLayoutEffect } from \"react\";\nimport { FullPageSpinner } from \"../library/spinner\";\nimport { Message } from \"./Message\";\nimport { CHAT_TYPE } from \"../../constants\";\nimport { useGetMessages } from \"./hooks/useGetMessages\";\nimport { ErrorMessage } from \"../library/Messages\";\n\ntype ChatFeedProps = {\n  chatType: CHAT_TYPE;\n  id: string;\n};\n\nexport const ChatFeed = React.forwardRef(\n  ({ chatType, id }: ChatFeedProps, ref) => {\n    const chatFeedRef = useRef<HTMLDivElement>(null);\n    const { messages, isLoading, refetchData, isError, error } = useGetMessages(\n      chatType,\n      id\n    );\n\n    useLayoutEffect(() => {\n      if (chatFeedRef.current) {\n        chatFeedRef.current.scrollTop = chatFeedRef.current.scrollHeight;\n      }\n    }, [messages]);\n\n    // instead of using imperative handler lift this messages state up\n    useImperativeHandle(ref, () => ({\n      refreshFeed: refetchData,\n    }));\n\n    return (\n      <div className=\"chat__feed\" ref={chatFeedRef}>\n        {isLoading && <FullPageSpinner size=\"medium\" />}\n        {isError && <ErrorMessage message={error.message} />}\n        {messages?.data.map((message) => {\n          return <Message key={message.id} message={message} />;\n        })}\n      </div>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}