{"ast":null,"code":"var _jsxFileName = \"/Users/mayank/Desktop/assignments/Chat-App/src/pages/main/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\nimport { useUser } from \"../../contexts/UserContext\";\nimport { Chat } from \"../../components/chat/Chat\";\nimport { Sidebar } from \"../../components/sidebar/Sidebar\";\nimport { CHAT_TYPE } from \"../../constants/index\";\nimport { getJoinedChannels, getConnections } from \"../../helpers/index\";\nimport { SplitPane } from \"../../components/common/SplitPane\";\nimport { useQuery } from \"../../hooks/useQuery\";\nimport \"./Main.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Main() {\n  _s();\n\n  const [user] = useUser();\n  const {\n    data: users\n  } = useQuery([user.id], _ref => {\n    let {\n      signal\n    } = _ref;\n    return getConnections(user.id, {\n      signal\n    });\n  }, {\n    refetchInterval: 5000\n  });\n  const {\n    data: channels\n  } = useQuery([user.id], _ref2 => {\n    let {\n      signal\n    } = _ref2;\n    return getJoinedChannels(user.id, {\n      signal\n    });\n  }, {\n    refetchInterval: 5000\n  });\n  const [selected, setSelected] = useState({\n    type: CHAT_TYPE.DM,\n    id: null\n  });\n  const selectedItem = selected.type === CHAT_TYPE.DM ? users === null || users === void 0 ? void 0 : users.find(user => user.id === selected.id) : channels === null || channels === void 0 ? void 0 : channels.find(channel => channel.id === selected.id);\n  const changeSelected = useCallback(toSelect => {\n    setSelected(toSelect);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main__body\",\n      children: /*#__PURE__*/_jsxDEV(SplitPane, {\n        minWidth: \"300px\",\n        leftPane: /*#__PURE__*/_jsxDEV(Sidebar, {\n          users: users || [],\n          channels: channels || [],\n          selected: selected,\n          changeSelected: changeSelected\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this),\n        rightPane: selectedItem && /*#__PURE__*/_jsxDEV(Chat, {\n          chatType: selected.type,\n          id: selectedItem.id,\n          name: selectedItem.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Main, \"6R1009HvTHX6aTuTQSgbScV3r3Y=\", false, function () {\n  return [useUser, useQuery, useQuery];\n});\n\n_c = Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/Users/mayank/Desktop/assignments/Chat-App/src/pages/main/index.tsx"],"names":["useState","useCallback","useUser","Chat","Sidebar","CHAT_TYPE","getJoinedChannels","getConnections","SplitPane","useQuery","Main","user","data","users","id","signal","refetchInterval","channels","selected","setSelected","type","DM","selectedItem","find","channel","changeSelected","toSelect","name"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,IAAT,QAAqB,4BAArB;AACA,SAASC,OAAT,QAAwB,kCAAxB;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,iBAAT,EAA4BC,cAA5B,QAAkD,qBAAlD;AAEA,SAASC,SAAT,QAA0B,mCAA1B;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,OAAO,YAAP;;AAOA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC7B,QAAM,CAACC,IAAD,IAAST,OAAO,EAAtB;AACA,QAAM;AAAEU,IAAAA,IAAI,EAAEC;AAAR,MAAkBJ,QAAQ,CAC9B,CAACE,IAAI,CAACG,EAAN,CAD8B,EAE9B;AAAA,QAAC;AAAEC,MAAAA;AAAF,KAAD;AAAA,WAAgBR,cAAc,CAACI,IAAI,CAACG,EAAN,EAAU;AAAEC,MAAAA;AAAF,KAAV,CAA9B;AAAA,GAF8B,EAG9B;AAAEC,IAAAA,eAAe,EAAE;AAAnB,GAH8B,CAAhC;AAKA,QAAM;AAAEJ,IAAAA,IAAI,EAAEK;AAAR,MAAqBR,QAAQ,CACjC,CAACE,IAAI,CAACG,EAAN,CADiC,EAEjC;AAAA,QAAC;AAAEC,MAAAA;AAAF,KAAD;AAAA,WAAgBT,iBAAiB,CAACK,IAAI,CAACG,EAAN,EAAU;AAAEC,MAAAA;AAAF,KAAV,CAAjC;AAAA,GAFiC,EAGjC;AAAEC,IAAAA,eAAe,EAAE;AAAnB,GAHiC,CAAnC;AAKA,QAAM,CAACE,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAAW;AACjDoB,IAAAA,IAAI,EAAEf,SAAS,CAACgB,EADiC;AAEjDP,IAAAA,EAAE,EAAE;AAF6C,GAAX,CAAxC;AAKA,QAAMQ,YAAY,GAChBJ,QAAQ,CAACE,IAAT,KAAkBf,SAAS,CAACgB,EAA5B,GACIR,KADJ,aACIA,KADJ,uBACIA,KAAK,CAAEU,IAAP,CAAaZ,IAAD,IAAUA,IAAI,CAACG,EAAL,KAAYI,QAAQ,CAACJ,EAA3C,CADJ,GAEIG,QAFJ,aAEIA,QAFJ,uBAEIA,QAAQ,CAAEM,IAAV,CAAgBC,OAAD,IAAaA,OAAO,CAACV,EAAR,KAAeI,QAAQ,CAACJ,EAApD,CAHN;AAKA,QAAMW,cAAc,GAAGxB,WAAW,CAAEyB,QAAD,IAAwB;AACzDP,IAAAA,WAAW,CAACO,QAAD,CAAX;AACD,GAFiC,EAE/B,EAF+B,CAAlC;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,6BACE,QAAC,SAAD;AACE,QAAA,QAAQ,EAAC,OADX;AAEE,QAAA,QAAQ,eACN,QAAC,OAAD;AACE,UAAA,KAAK,EAAEb,KAAK,IAAI,EADlB;AAEE,UAAA,QAAQ,EAAEI,QAAQ,IAAI,EAFxB;AAGE,UAAA,QAAQ,EAAEC,QAHZ;AAIE,UAAA,cAAc,EAAEO;AAJlB;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAUE,QAAA,SAAS,EACPH,YAAY,iBACV,QAAC,IAAD;AACE,UAAA,QAAQ,EAAEJ,QAAQ,CAACE,IADrB;AAEE,UAAA,EAAE,EAAEE,YAAY,CAACR,EAFnB;AAGE,UAAA,IAAI,EAAEQ,YAAY,CAACK;AAHrB;AAAA;AAAA;AAAA;AAAA;AAZN;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD;;GApDuBjB,I;UACPR,O,EACSO,Q,EAKGA,Q;;;KAPLC,I","sourcesContent":["import { useState, useCallback } from \"react\";\nimport { useUser } from \"../../contexts/UserContext\";\nimport { Chat } from \"../../components/chat/Chat\";\nimport { Sidebar } from \"../../components/sidebar/Sidebar\";\nimport { CHAT_TYPE } from \"../../constants/index\";\nimport { getJoinedChannels, getConnections } from \"../../helpers/index\";\nimport { ConnectionType, JoinedChannelType } from \"../../types\";\nimport { SplitPane } from \"../../components/common/SplitPane\";\nimport { useQuery } from \"../../hooks/useQuery\";\nimport \"./Main.css\";\n\ntype Selected = {\n  type: CHAT_TYPE;\n  id: string | null;\n};\n\nexport default function Main() {\n  const [user] = useUser();\n  const { data: users } = useQuery<ConnectionType[]>(\n    [user.id],\n    ({ signal }) => getConnections(user.id, { signal }),\n    { refetchInterval: 5000 }\n  );\n  const { data: channels } = useQuery<JoinedChannelType[]>(\n    [user.id],\n    ({ signal }) => getJoinedChannels(user.id, { signal }),\n    { refetchInterval: 5000 }\n  );\n  const [selected, setSelected] = useState<Selected>({\n    type: CHAT_TYPE.DM,\n    id: null,\n  });\n\n  const selectedItem =\n    selected.type === CHAT_TYPE.DM\n      ? users?.find((user) => user.id === selected.id)\n      : channels?.find((channel) => channel.id === selected.id);\n\n  const changeSelected = useCallback((toSelect: Selected) => {\n    setSelected(toSelect);\n  }, []);\n\n  return (\n    <div className=\"main\">\n      <div className=\"main__body\">\n        <SplitPane\n          minWidth=\"300px\"\n          leftPane={\n            <Sidebar\n              users={users || []}\n              channels={channels || []}\n              selected={selected}\n              changeSelected={changeSelected}\n            />\n          }\n          rightPane={\n            selectedItem && (\n              <Chat\n                chatType={selected.type}\n                id={selectedItem.id}\n                name={selectedItem.name}\n              />\n            )\n          }\n        />\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}