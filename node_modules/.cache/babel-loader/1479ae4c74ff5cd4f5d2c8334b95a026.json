{"ast":null,"code":"var _jsxFileName = \"/Users/mayank/Desktop/assignments/chat-app/src/components/main/Main.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { Chat } from \"../chat/Chat\";\nimport { Sidebar } from \"../sidebar/Sidebar\";\nimport { MESSAGE_TYPE } from \"../../constants/index\";\nimport { getKnownChannels, getKnownUsers } from \"../../helpers/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Main() {\n  _s();\n\n  const [users, setUsers] = useState([]);\n  const [channels, setChannels] = useState([]);\n  const [selected, setSelected] = useState({\n    type: MESSAGE_TYPE.DM,\n    id: null\n  });\n  const selectedItem = selected.type === MESSAGE_TYPE.DM ? users.find(user => user.id === selected.id) : channels.find(channel => channel.id === selected.id);\n  useEffect(() => {\n    // apply pooling to refresh the data\n    getKnownUsers().then(data => setUsers(data));\n    getKnownChannels().then(data => setChannels(data));\n  }, []);\n\n  function changeSelected(toSelect) {\n    setSelected(toSelect);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      users: users,\n      channels: channels,\n      selected: selected,\n      changeSelected: changeSelected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), selectedItem && /*#__PURE__*/_jsxDEV(Chat, {\n      chatType: MESSAGE_TYPE.CHANNEL,\n      id: selectedItem.id,\n      name: \"Rishi Goel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Main, \"dT8T6Ary3s8nvmpIC2u+LLgpDgo=\");\n\n_c = Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/Users/mayank/Desktop/assignments/chat-app/src/components/main/Main.tsx"],"names":["useState","useEffect","Chat","Sidebar","MESSAGE_TYPE","getKnownChannels","getKnownUsers","Main","users","setUsers","channels","setChannels","selected","setSelected","type","DM","id","selectedItem","find","user","channel","then","data","changeSelected","toSelect","CHANNEL"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,SAASC,gBAAT,EAA2BC,aAA3B,QAAgD,qBAAhD;;AASA,OAAO,SAASC,IAAT,GAAgB;AAAA;;AACrB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAkB,EAAlB,CAAlC;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAqB,EAArB,CAAxC;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAW;AACjDc,IAAAA,IAAI,EAAEV,YAAY,CAACW,EAD8B;AAEjDC,IAAAA,EAAE,EAAE;AAF6C,GAAX,CAAxC;AAIA,QAAMC,YAAY,GAChBL,QAAQ,CAACE,IAAT,KAAkBV,YAAY,CAACW,EAA/B,GACIP,KAAK,CAACU,IAAN,CAAYC,IAAD,IAAUA,IAAI,CAACH,EAAL,KAAYJ,QAAQ,CAACI,EAA1C,CADJ,GAEIN,QAAQ,CAACQ,IAAT,CAAeE,OAAD,IAAaA,OAAO,CAACJ,EAAR,KAAeJ,QAAQ,CAACI,EAAnD,CAHN;AAKAf,EAAAA,SAAS,CAAC,MAAM;AACd;AACAK,IAAAA,aAAa,GAAGe,IAAhB,CAAsBC,IAAD,IAAUb,QAAQ,CAACa,IAAD,CAAvC;AACAjB,IAAAA,gBAAgB,GAAGgB,IAAnB,CAAyBC,IAAD,IAAUX,WAAW,CAACW,IAAD,CAA7C;AACD,GAJQ,EAIN,EAJM,CAAT;;AAMA,WAASC,cAAT,CAAwBC,QAAxB,EAA4C;AAC1CX,IAAAA,WAAW,CAACW,QAAD,CAAX;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACE,QAAC,OAAD;AACE,MAAA,KAAK,EAAEhB,KADT;AAEE,MAAA,QAAQ,EAAEE,QAFZ;AAGE,MAAA,QAAQ,EAAEE,QAHZ;AAIE,MAAA,cAAc,EAAEW;AAJlB;AAAA;AAAA;AAAA;AAAA,YADF,EAOGN,YAAY,iBACX,QAAC,IAAD;AACE,MAAA,QAAQ,EAAEb,YAAY,CAACqB,OADzB;AAEE,MAAA,EAAE,EAAER,YAAY,CAACD,EAFnB;AAGE,MAAA,IAAI,EAAC;AAHP;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD;;GAvCeT,I;;KAAAA,I","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { Chat } from \"../chat/Chat\";\nimport { Sidebar } from \"../sidebar/Sidebar\";\nimport { MESSAGE_TYPE } from \"../../constants/index\";\nimport { getKnownChannels, getKnownUsers } from \"../../helpers/index\";\n\nimport { KnownUserType, KnownChannelType } from \"../../types\";\n\ntype Selected = {\n  type: MESSAGE_TYPE;\n  id: string | null;\n};\n\nexport function Main() {\n  const [users, setUsers] = useState<KnownUserType[]>([]);\n  const [channels, setChannels] = useState<KnownChannelType[]>([]);\n  const [selected, setSelected] = useState<Selected>({\n    type: MESSAGE_TYPE.DM,\n    id: null,\n  });\n  const selectedItem =\n    selected.type === MESSAGE_TYPE.DM\n      ? users.find((user) => user.id === selected.id)\n      : channels.find((channel) => channel.id === selected.id);\n\n  useEffect(() => {\n    // apply pooling to refresh the data\n    getKnownUsers().then((data) => setUsers(data));\n    getKnownChannels().then((data) => setChannels(data));\n  }, []);\n\n  function changeSelected(toSelect: Selected) {\n    setSelected(toSelect);\n  }\n\n  return (\n    <div className=\"main\">\n      <Sidebar\n        users={users}\n        channels={channels}\n        selected={selected}\n        changeSelected={changeSelected}\n      />\n      {selectedItem && (\n        <Chat\n          chatType={MESSAGE_TYPE.CHANNEL}\n          id={selectedItem.id}\n          name=\"Rishi Goel\"\n        />\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}