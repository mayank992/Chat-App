{"ast":null,"code":"import axios from \"axios\";\nimport { knownUsers, users, knownChannels, channels } from \"./fixture\";\nimport { MESSAGE_TYPE } from \"../constants/index\";\n\nasync function delay(ms) {\n  await new Promise((resolve, reject) => {\n    setTimeout(() => resolve(\"\"), ms);\n  });\n}\n\nexport async function getUsers() {\n  await delay(1000);\n  return users;\n}\nexport async function getKnownUsers(userId) {\n  const res = await axios.get(\"/channels/known\", {\n    headers: {\n      [\"user-id\"]: userId\n    }\n  });\n  console.log(res.data);\n  return res.data.map(user => ({ ...user,\n    unreadCount: 0\n  }));\n}\nexport async function getChannels() {\n  await delay(1000);\n  return channels;\n}\nexport async function getKnownChannels() {\n  await delay(1000);\n  return knownChannels;\n}\nexport async function getMessages(userId, type, id) {\n  const url = type === MESSAGE_TYPE.DM ? `/users/${id}/dms` : `/channels/${id}/messages`;\n  const res = await axios.get(url, {\n    headers: {\n      userId: userId\n    }\n  });\n  return res.data;\n}\nexport async function getMembers(channelId) {\n  await delay(1000);\n  return knownUsers;\n}\nexport async function sendMessageAPI(message) {\n  let url = message.type === MESSAGE_TYPE.DM ? `/users/${message.toId}/dms` : `/channels/${message.toId}/messages`;\n  const res = await axios.post(url, {\n    from: message.from,\n    fromId: message.fromId,\n    to: message.to,\n    toId: message.toId,\n    text: message.text\n  });\n  return;\n}\nexport async function loginAPI(_ref) {\n  let {\n    username,\n    firstname,\n    lastname\n  } = _ref;\n  const res = await axios.post(\"/login\", {\n    username,\n    firstname,\n    lastname\n  });\n  return res.data;\n}","map":{"version":3,"sources":["/Users/mayank/Desktop/assignments/chat-app/src/helpers/index.ts"],"names":["axios","knownUsers","users","knownChannels","channels","MESSAGE_TYPE","delay","ms","Promise","resolve","reject","setTimeout","getUsers","getKnownUsers","userId","res","get","headers","console","log","data","map","user","unreadCount","getChannels","getKnownChannels","getMessages","type","id","url","DM","getMembers","channelId","sendMessageAPI","message","toId","post","from","fromId","to","text","loginAPI","username","firstname","lastname"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport {\n  knownUsers,\n  users,\n  knownChannels,\n  channels,\n  messages,\n} from \"./fixture\";\nimport { MESSAGE_TYPE } from \"../constants/index\";\n\nasync function delay(ms: number) {\n  await new Promise((resolve, reject) => {\n    setTimeout(() => resolve(\"\"), ms);\n  });\n}\n\nexport async function getUsers() {\n  await delay(1000);\n  return users;\n}\n\nexport async function getKnownUsers(userId: string) {\n  const res = await axios.get(\"/channels/known\", {\n    headers: { [\"user-id\"]: userId },\n  });\n\n  console.log(res.data);\n\n  return res.data.map((user: any) => ({ ...user, unreadCount: 0 }));\n}\n\nexport async function getChannels() {\n  await delay(1000);\n  return channels;\n}\n\nexport async function getKnownChannels() {\n  await delay(1000);\n  return knownChannels;\n}\n\nexport async function getMessages(\n  userId: string,\n  type: MESSAGE_TYPE,\n  id: string\n) {\n  const url =\n    type === MESSAGE_TYPE.DM ? `/users/${id}/dms` : `/channels/${id}/messages`;\n\n  const res = await axios.get(url, { headers: { userId: userId } });\n\n  return res.data;\n}\n\nexport async function getMembers(channelId: string) {\n  await delay(1000);\n  return knownUsers;\n}\n\nexport async function sendMessageAPI(message: {\n  type: MESSAGE_TYPE;\n  from: string;\n  fromId: string;\n  to: string;\n  toId: string;\n  text: string;\n}) {\n  let url =\n    message.type === MESSAGE_TYPE.DM\n      ? `/users/${message.toId}/dms`\n      : `/channels/${message.toId}/messages`;\n\n  const res = await axios.post(url, {\n    from: message.from,\n    fromId: message.fromId,\n    to: message.to,\n    toId: message.toId,\n    text: message.text,\n  });\n\n  return;\n}\n\nexport async function loginAPI({\n  username,\n  firstname,\n  lastname,\n}: {\n  username: string;\n  firstname: string;\n  lastname: string;\n}) {\n  const res = await axios.post(\"/login\", {\n    username,\n    firstname,\n    lastname,\n  });\n\n  return res.data;\n}\n"]},"metadata":{},"sourceType":"module"}