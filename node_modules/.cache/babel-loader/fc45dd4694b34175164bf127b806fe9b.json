{"ast":null,"code":"var _jsxFileName = \"/Users/mayank/Desktop/assignments/chat-app/src/components/chat/Chat.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { ChatFeed } from \"./ChatFeed\";\nimport userLogo from \"../../user.png\";\nimport { MESSAGE_TYPE } from \"../../constants/index\";\nimport { getMessages, sendMessageAPI } from \"../../helpers/index\";\nimport { ChannelMembers } from \"./ChannelMembers\";\nimport { UserContext } from \"../../contexts/UserContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Chat(_ref) {\n  _s();\n\n  let {\n    chatType,\n    id,\n    name\n  } = _ref;\n  const user = useContext(UserContext);\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    let timerId;\n\n    async function pollMessages() {\n      await getMessages(user.id, chatType, id);\n      timerId = window.setTimeout(fetchMessages, 5000);\n    }\n\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, []);\n\n  async function refreshMessages() {\n    await getMessages(user.id, chatType, id).then(data => setMessages(data));\n  }\n\n  function sendMessage(e) {\n    e.preventDefault();\n    sendMessageAPI({\n      type: chatType,\n      from: user.name,\n      to: name,\n      fromId: user.id,\n      toId: id,\n      text: message\n    }).then(() => getMessages(user.id, chatType, id)).then(data => setMessages(data));\n    setMessage(\"\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"chat__header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"chat__icon\",\n        src: userLogo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), chatType === MESSAGE_TYPE.CHANNEL && /*#__PURE__*/_jsxDEV(ChannelMembers, {\n        channelId: id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 47\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatFeed, {\n      messages: messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"chat__footer\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: sendMessage,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"chat__message-input\",\n          placeholder: \"Message\",\n          value: message,\n          onChange: e => setMessage(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"chat__send-btn\",\n          disabled: message === \"\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chat, \"cpt5pfse08pcNUkFU/ekYR1auXU=\");\n\n_c = Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/mayank/Desktop/assignments/chat-app/src/components/chat/Chat.tsx"],"names":["React","useState","useEffect","useContext","ChatFeed","userLogo","MESSAGE_TYPE","getMessages","sendMessageAPI","ChannelMembers","UserContext","Chat","chatType","id","name","user","message","setMessage","messages","setMessages","timerId","pollMessages","window","setTimeout","fetchMessages","clearTimeout","refreshMessages","then","data","sendMessage","e","preventDefault","type","from","to","fromId","toId","text","CHANNEL","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { ChatFeed } from \"./ChatFeed\";\nimport userLogo from \"../../user.png\";\nimport { MESSAGE_TYPE } from \"../../constants/index\";\nimport { getMessages, sendMessageAPI } from \"../../helpers/index\";\nimport { MessageType, KnownUserType, KnownChannelType } from \"../../types\";\nimport { ChannelMembers } from \"./ChannelMembers\";\nimport { UserContext } from \"../../contexts/UserContext\";\n\ntype Props = {\n  chatType: MESSAGE_TYPE;\n  id: string;\n  name: string;\n};\n\nexport function Chat({ chatType, id, name }: Props) {\n  const user = useContext(UserContext);\n  const [message, setMessage] = useState<string>(\"\");\n  const [messages, setMessages] = useState<MessageType[]>([]);\n\n  useEffect(() => {\n    let timerId: number;\n\n    async function pollMessages() {\n      await getMessages(user.id, chatType, id);\n\n      timerId = window.setTimeout(fetchMessages, 5000);\n    }\n\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, []);\n\n  async function refreshMessages() {\n    await getMessages(user.id, chatType, id).then((data) => setMessages(data));\n  }\n\n  function sendMessage(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    sendMessageAPI({\n      type: chatType,\n      from: user.name,\n      to: name,\n      fromId: user.id,\n      toId: id,\n      text: message,\n    })\n      .then(() => getMessages(user.id, chatType, id))\n      .then((data) => setMessages(data));\n    setMessage(\"\");\n  }\n\n  return (\n    <div className=\"chat\">\n      <header className=\"chat__header\">\n        <img className=\"chat__icon\" src={userLogo} />\n        <p>{name}</p>\n        {chatType === MESSAGE_TYPE.CHANNEL && <ChannelMembers channelId={id} />}\n      </header>\n      <ChatFeed messages={messages} />\n      <footer className=\"chat__footer\">\n        <form onSubmit={sendMessage}>\n          <input\n            className=\"chat__message-input\"\n            placeholder=\"Message\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            required\n          />\n          <button\n            type=\"submit\"\n            className=\"chat__send-btn\"\n            disabled={message === \"\"}\n          >\n            Send\n          </button>\n        </form>\n      </footer>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}