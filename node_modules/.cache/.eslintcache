[{"/Users/mayank/Desktop/assignments/chat-app/src/index.tsx":"1","/Users/mayank/Desktop/assignments/chat-app/src/reportWebVitals.ts":"2","/Users/mayank/Desktop/assignments/chat-app/src/App.tsx":"3","/Users/mayank/Desktop/assignments/chat-app/src/components/Main/index.ts":"4","/Users/mayank/Desktop/assignments/chat-app/src/components/Main/Main.tsx":"5","/Users/mayank/Desktop/assignments/chat-app/src/components/main/index.ts":"6","/Users/mayank/Desktop/assignments/chat-app/src/components/main/Main.tsx":"7","/Users/mayank/Desktop/assignments/chat-app/src/components/chat/Chat.tsx":"8","/Users/mayank/Desktop/assignments/chat-app/src/components/sidebar/Sidebar.tsx":"9","/Users/mayank/Desktop/assignments/chat-app/src/components/chat/ChatFeed.tsx":"10","/Users/mayank/Desktop/assignments/chat-app/src/components/chat/Message.tsx":"11","/Users/mayank/Desktop/assignments/chat-app/src/components/collapsibleList/CollapsibleList.tsx":"12","/Users/mayank/Desktop/assignments/chat-app/src/components/collapsibleList/ListItem.tsx":"13","/Users/mayank/Desktop/assignments/chat-app/src/components/collapsibleList/index.ts":"14","/Users/mayank/Desktop/assignments/chat-app/src/helpers/index.ts":"15","/Users/mayank/Desktop/assignments/chat-app/src/helpers/fixture.ts":"16","/Users/mayank/Desktop/assignments/chat-app/src/constants/index.ts":"17","/Users/mayank/Desktop/assignments/chat-app/src/types.ts":"18","/Users/mayank/Desktop/assignments/chat-app/src/hooks/useToggle.ts":"19","/Users/mayank/Desktop/assignments/chat-app/src/components/Modal.tsx":"20","/Users/mayank/Desktop/assignments/chat-app/src/components/chat/ChannelMembers.tsx":"21","/Users/mayank/Desktop/assignments/chat-app/src/contexts/UserContext.ts":"22","/Users/mayank/Desktop/assignments/chat-app/src/components/login/Login.tsx":"23","/Users/mayank/Desktop/assignments/chat-app/src/hooks/usePolling.ts":"24"},{"size":500,"mtime":1645447014338,"results":"25","hashOfConfig":"26"},{"size":425,"mtime":1645447014339,"results":"27","hashOfConfig":"26"},{"size":692,"mtime":1645713568468,"results":"28","hashOfConfig":"26"},{"size":31,"mtime":1645514824590,"results":"29","hashOfConfig":"26"},{"size":774,"mtime":1645530849370,"results":"30","hashOfConfig":"26"},{"size":31,"mtime":1645514824590,"results":"31","hashOfConfig":"26"},{"size":1675,"mtime":1645739271271,"results":"32","hashOfConfig":"26"},{"size":1762,"mtime":1645770776253,"results":"33","hashOfConfig":"26"},{"size":2339,"mtime":1645703468554,"results":"34","hashOfConfig":"26"},{"size":909,"mtime":1645770851074,"results":"35","hashOfConfig":"26"},{"size":558,"mtime":1645714895763,"results":"36","hashOfConfig":"26"},{"size":642,"mtime":1645617773327,"results":"37","hashOfConfig":"26"},{"size":797,"mtime":1645624288185,"results":"38","hashOfConfig":"26"},{"size":81,"mtime":1645602120246,"results":"39","hashOfConfig":"26"},{"size":1953,"mtime":1645736455629,"results":"40","hashOfConfig":"26"},{"size":6890,"mtime":1645629716744,"results":"41","hashOfConfig":"26"},{"size":46,"mtime":1645611546813,"results":"42","hashOfConfig":"26"},{"size":553,"mtime":1645612547632,"results":"43","hashOfConfig":"26"},{"size":308,"mtime":1645617682123,"results":"44","hashOfConfig":"26"},{"size":496,"mtime":1645620873458,"results":"45","hashOfConfig":"26"},{"size":2150,"mtime":1645636188805,"results":"46","hashOfConfig":"26"},{"size":148,"mtime":1645685952750,"results":"47","hashOfConfig":"26"},{"size":1822,"mtime":1645714229982,"results":"48","hashOfConfig":"26"},{"size":332,"mtime":1645739129613,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},"yhhjva",{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"53"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"53"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"53"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"53"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"53"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"53"},"/Users/mayank/Desktop/assignments/chat-app/src/index.tsx",[],[],["131","132"],"/Users/mayank/Desktop/assignments/chat-app/src/reportWebVitals.ts",[],[],"/Users/mayank/Desktop/assignments/chat-app/src/App.tsx",[],[],"/Users/mayank/Desktop/assignments/chat-app/src/components/Main/index.ts",[],[],"/Users/mayank/Desktop/assignments/chat-app/src/components/Main/Main.tsx",[],[],"/Users/mayank/Desktop/assignments/chat-app/src/components/main/index.ts",[],[],"/Users/mayank/Desktop/assignments/chat-app/src/components/main/Main.tsx",["133"],[],"import { useState, useEffect, useContext } from \"react\";\nimport { UserContext } from \"../../contexts/UserContext\";\nimport { Chat } from \"../chat/Chat\";\nimport { Sidebar } from \"../sidebar/Sidebar\";\nimport { MESSAGE_TYPE } from \"../../constants/index\";\nimport { getKnownChannels, getKnownUsers } from \"../../helpers/index\";\nimport { usePolling } from \"../../hooks/usePolling\";\n\nimport { KnownUserType, KnownChannelType } from \"../../types\";\n\ntype Selected = {\n  type: MESSAGE_TYPE;\n  id: string | null;\n};\n\nexport function Main() {\n  const user = useContext(UserContext);\n  const [users, setUsers] = useState<KnownUserType[]>([]);\n  const [channels, setChannels] = useState<KnownChannelType[]>([]);\n  const [selected, setSelected] = useState<Selected>({\n    type: MESSAGE_TYPE.DM,\n    id: null,\n  });\n  const selectedItem =\n    selected.type === MESSAGE_TYPE.DM\n      ? users.find((user) => user.id === selected.id)\n      : channels.find((channel) => channel.id === selected.id);\n\n  usePolling(\n    async () => {\n      // apply pooling to refresh the data\n      const users = await getKnownUsers(user.id);\n      setUsers(users);\n\n      const channels = await getKnownChannels();\n      setChannels(channels);\n    },\n    [],\n    5000\n  );\n\n  function changeSelected(toSelect: Selected) {\n    setSelected(toSelect);\n  }\n\n  return (\n    <div className=\"main\">\n      <Sidebar\n        users={users}\n        channels={channels}\n        selected={selected}\n        changeSelected={changeSelected}\n      />\n      {selectedItem && (\n        <Chat\n          chatType={selected.type}\n          id={selectedItem.id}\n          name={selectedItem.name}\n        />\n      )}\n    </div>\n  );\n}\n","/Users/mayank/Desktop/assignments/chat-app/src/components/chat/Chat.tsx",["134","135","136","137"],[],"import React, { useState, useContext } from \"react\";\nimport { ChatFeed } from \"./ChatFeed\";\nimport userLogo from \"../../user.png\";\nimport { MESSAGE_TYPE } from \"../../constants/index\";\nimport { getMessages, sendMessageAPI } from \"../../helpers/index\";\nimport { MessageType } from \"../../types\";\nimport { ChannelMembers } from \"./ChannelMembers\";\nimport { UserContext } from \"../../contexts/UserContext\";\nimport { usePolling } from \"../../hooks/usePolling\";\n\ntype Props = {\n  chatType: MESSAGE_TYPE;\n  id: string;\n  name: string;\n};\n\nexport function Chat({ chatType, id, name }: Props) {\n  const user = useContext(UserContext);\n  const [message, setMessage] = useState<string>(\"\");\n\n  async function handleMessageSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n\n    await sendMessageAPI({\n      type: chatType,\n      from: user.name,\n      to: name,\n      fromId: user.id,\n      toId: id,\n      text: message,\n    });\n\n    setMessage(\"\");\n  }\n\n  return (\n    <div className=\"chat\">\n      <header className=\"chat__header\">\n        <img className=\"chat__icon\" src={userLogo} />\n        <p>{name}</p>\n        {chatType === MESSAGE_TYPE.CHANNEL && <ChannelMembers channelId={id} />}\n      </header>\n      <ChatFeed chatType={chatType} id={id} />\n      <footer className=\"chat__footer\">\n        <form onSubmit={handleMessageSubmit}>\n          <input\n            className=\"chat__message-input\"\n            placeholder=\"Message\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n          />\n          <button\n            type=\"submit\"\n            className=\"chat__send-btn\"\n            disabled={message === \"\"}\n          >\n            Send\n          </button>\n        </form>\n      </footer>\n    </div>\n  );\n}\n",["138","139"],"/Users/mayank/Desktop/assignments/chat-app/src/components/sidebar/Sidebar.tsx",[],[],"/Users/mayank/Desktop/assignments/chat-app/src/components/chat/ChatFeed.tsx",[],[],"/Users/mayank/Desktop/assignments/chat-app/src/components/chat/Message.tsx",["140"],[],"import userIcon from \"../../user.png\";\nimport { MessageType } from \"../../types\";\n\nexport function Message({ message }: { message: MessageType }) {\n  return (\n    <div className=\"message\">\n      <img src={userIcon} className=\"message__user-img\" />\n      <div className=\"message__body\">\n        <header className=\"message__header\">\n          <h4 className=\"message__username\">{message.from}</h4>\n          <p className=\"message__time\">{message.time}</p>\n        </header>\n        <p className=\"message__text\">{message.text}</p>\n      </div>\n    </div>\n  );\n}\n","/Users/mayank/Desktop/assignments/chat-app/src/components/collapsibleList/CollapsibleList.tsx",[],[],"/Users/mayank/Desktop/assignments/chat-app/src/components/collapsibleList/ListItem.tsx",["141"],[],"export function ListItemBadge({ text }: { text: string }) {\n  return <span className={\"list-item__badge\"}>{text}</span>;\n}\n\nexport function ListItemText({ text }: { text: string }) {\n  return <p className=\"list-item__text\">{text}</p>;\n}\n\nexport function ListItemIcon({ src, style }: { src: string; style?: any }) {\n  return <img className=\"list-item__icon\" src={src} style={style} />;\n}\n\ntype ListItemProps = {\n  selected: boolean;\n  onClick?: React.MouseEventHandler<HTMLElement>;\n  children: React.ReactNode;\n  style?: any;\n};\n\nexport function ListItem({\n  selected,\n  onClick,\n  children,\n  style,\n}: ListItemProps) {\n  return (\n    <dd\n      className={\"list-item\" + (selected ? \" list-item--selected\" : \"\")}\n      onClick={onClick}\n      style={style}\n    >\n      {children}\n    </dd>\n  );\n}\n","/Users/mayank/Desktop/assignments/chat-app/src/components/collapsibleList/index.ts",[],[],"/Users/mayank/Desktop/assignments/chat-app/src/helpers/index.ts",["142","143"],[],"/Users/mayank/Desktop/assignments/chat-app/src/helpers/fixture.ts",[],[],"/Users/mayank/Desktop/assignments/chat-app/src/constants/index.ts",[],[],"/Users/mayank/Desktop/assignments/chat-app/src/types.ts",[],[],"/Users/mayank/Desktop/assignments/chat-app/src/hooks/useToggle.ts",[],[],"/Users/mayank/Desktop/assignments/chat-app/src/components/Modal.tsx",["144"],[],"import React, { useEffect, useRef } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nconst modalElem = document.getElementById(\"modal\");\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport function Modal({ children }: Props) {\n  const el = useRef<HTMLDivElement>(document.createElement(\"div\"));\n\n  useEffect(() => {\n    modalElem?.appendChild(el.current);\n\n    return () => {\n      modalElem?.removeChild(el.current);\n    };\n  }, []);\n\n  return ReactDOM.createPortal(children, el.current);\n}\n","/Users/mayank/Desktop/assignments/chat-app/src/components/chat/ChannelMembers.tsx",["145","146"],[],"import { useEffect, useState } from \"react\";\nimport { useToggle } from \"../../hooks/useToggle\";\nimport { Modal } from \"../Modal\";\nimport { getMembers } from \"../../helpers/index\";\nimport { KnownUserType } from \"../../types\";\nimport { ListItem, ListItemIcon, ListItemText } from \"../collapsibleList/index\";\nimport addUserIcon from \"../../add-user.png\";\nimport userIcon from \"../../user.png\";\n\ntype Props = {\n  channelId: string;\n};\n\nexport function ChannelMembers({ channelId }: Props) {\n  const { open, toggle } = useToggle(false);\n  const [members, setMembers] = useState<KnownUserType[]>([]);\n\n  useEffect(() => {\n    getMembers(channelId).then((data) => setMembers(data));\n  }, []);\n\n  return (\n    <>\n      <span className=\"chat__members\" onClick={toggle}>\n        <img className=\"chat-members__icon\" src={userIcon} />\n        <p className=\"chat__members-count\">{8}</p>\n      </span>\n      {open && (\n        <Modal>\n          <div className=\"modal-container\">\n            <div className=\"chat__members-modal\">\n              <header className=\"chat__members-modal-hedear\">\n                <h3>Members</h3>\n                <button onClick={toggle}>X</button>\n              </header>\n              <dl className=\"chat__members-modal-body\">\n                <ListItem\n                  selected={false}\n                  onClick={() => {}}\n                  style={{ padding: \"5px 20px\", height: \"60px\" }}\n                >\n                  <ListItemIcon src={addUserIcon} />\n                  <ListItemText text=\"Add People\" />\n                </ListItem>\n                {members.map((member) => {\n                  return (\n                    <ListItem\n                      key={member.id}\n                      selected={false}\n                      onClick={() => {}}\n                      style={{ padding: \"5px 20px\", height: \"60px\" }}\n                    >\n                      <ListItemIcon src={userIcon} />\n                      <ListItemText text={member.name} />\n                    </ListItem>\n                  );\n                })}\n              </dl>\n            </div>\n          </div>\n        </Modal>\n      )}\n    </>\n  );\n}\n","/Users/mayank/Desktop/assignments/chat-app/src/contexts/UserContext.ts",[],[],"/Users/mayank/Desktop/assignments/chat-app/src/components/login/Login.tsx",[],[],"/Users/mayank/Desktop/assignments/chat-app/src/hooks/usePolling.ts",["147"],[],"import { useEffect } from \"react\";\n\nexport function usePolling(cb: () => Promise<void>, deps: any[], ms: number) {\n  useEffect(() => {\n    let timerId: number;\n\n    (async function poll() {\n      await cb();\n\n      timerId = window.setTimeout(poll, ms);\n    })();\n\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, []);\n}\n",{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","severity":1,"message":"153","line":1,"column":20,"nodeType":"154","messageId":"155","endLine":1,"endColumn":29},{"ruleId":"152","severity":1,"message":"156","line":5,"column":10,"nodeType":"154","messageId":"155","endLine":5,"endColumn":21},{"ruleId":"152","severity":1,"message":"157","line":6,"column":10,"nodeType":"154","messageId":"155","endLine":6,"endColumn":21},{"ruleId":"152","severity":1,"message":"158","line":9,"column":10,"nodeType":"154","messageId":"155","endLine":9,"endColumn":20},{"ruleId":"159","severity":1,"message":"160","line":39,"column":9,"nodeType":"161","endLine":39,"endColumn":54},{"ruleId":"148","replacedBy":"162"},{"ruleId":"150","replacedBy":"163"},{"ruleId":"159","severity":1,"message":"160","line":7,"column":7,"nodeType":"161","endLine":7,"endColumn":59},{"ruleId":"159","severity":1,"message":"160","line":10,"column":10,"nodeType":"161","endLine":10,"endColumn":69},{"ruleId":"152","severity":1,"message":"164","line":7,"column":3,"nodeType":"154","messageId":"155","endLine":7,"endColumn":11},{"ruleId":"152","severity":1,"message":"165","line":73,"column":9,"nodeType":"154","messageId":"155","endLine":73,"endColumn":12},{"ruleId":"166","severity":1,"message":"167","line":17,"column":33,"nodeType":"154","endLine":17,"endColumn":40},{"ruleId":"166","severity":1,"message":"168","line":20,"column":6,"nodeType":"169","endLine":20,"endColumn":8,"suggestions":"170"},{"ruleId":"159","severity":1,"message":"160","line":25,"column":9,"nodeType":"161","endLine":25,"endColumn":62},{"ruleId":"166","severity":1,"message":"171","line":16,"column":6,"nodeType":"169","endLine":16,"endColumn":8,"suggestions":"172"},"no-native-reassign",["173"],"no-negated-in-lhs",["174"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'getMessages' is defined but never used.","'MessageType' is defined but never used.","'usePolling' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["173"],["174"],"'messages' is defined but never used.","'res' is assigned a value but never used.","react-hooks/exhaustive-deps","The ref value 'el.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'el.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has a missing dependency: 'channelId'. Either include it or remove the dependency array.","ArrayExpression",["175"],"React Hook useEffect has missing dependencies: 'cb' and 'ms'. Either include them or remove the dependency array. If 'cb' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["176"],"no-global-assign","no-unsafe-negation",{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},"Update the dependencies array to be: [channelId]",{"range":"181","text":"182"},"Update the dependencies array to be: [cb, ms]",{"range":"183","text":"184"},[681,683],"[channelId]",[325,327],"[cb, ms]"]